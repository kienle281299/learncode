
// document.getElementById("content").innerHTML =
//   "T√†i li·ªáu h·ªçc Javascript to√†n t·∫≠p";
//   console.log("hello");
//   console.log("world");
//   console.log(1+1+1);
  //bi·∫øn truy·ªÅn gi√° tr·ªã 
//   let language;
//   language = "hello";
//   console.log(language);

// let name3 = "language";
// console.log(name3);

// let language3 = "JavaScript";
// let message = "Hello";
// let date = "Monday";
// thay ƒë·ªïi bi·∫øn
// let language2 = "language";
// console.log(language2);
// language2 = "react"
// console.log(language2);

// let num = 100; // ƒê√∫ng
// let _result3@ = "haha"; // Sai: v√¨ s·ª≠ d·ª•ng k√≠ t·ª± ƒë·∫∑c bi·ªát @
// let –∏–º—è_abc = "hehehe"; // ƒê√∫ng: ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng k√≠ t·ª± kh√¥ng ph·∫£i Latinh
// let 2me = 'love'; // Sai: v√¨ b·∫Øt ƒë·∫ßu b·∫±ng s·ªë
// let I_WANT_TO_EAT = "just eat it"; // ƒê√∫ng
// let _dientihinhvuong = 10000; // ƒê√∫ng: ƒë∆∞·ª£c ph√©p b·∫Øt ƒë·∫ßu d·∫•u _
// let a%b = 50; // Sai: v√¨ c√≥ k√≠ t·ª± ƒë·∫∑c bi·ªát %
// let var = 'oh no'; // Sai: v√¨ t√™n bi·∫øn tr√πng t·ª´ kh√≥a var

//////////////////////
// let name2= "lam";
// let message1 = name2;
// console.log(message1);

// let x = "hello";
// let y = "world";
// x = y;
// y = "hello";
// console.log(x, y);

//h·∫±ng H·∫±ng l√† "t√™n bi·ªÉu t∆∞·ª£ng" ƒë·∫°i di·ªán cho m·ªôt gi√° tr·ªã kh√¥ng thay ƒë·ªïi trong ch∆∞∆°ng tr√¨nh.

// const <t√™n h·∫±ng> = <gi√° tr·ªã c·ªßa h·∫±ng>;
// const PI = 3.14159;
// console.log(PI);
// const COLOR_ORANGE = "#FF4500";
// const COLOR_YELLOW = "#FFFF00";
// console.log(COLOR_ORANGE);
// console.log(COLOR_YELLOW);
// let currentColor = COLOR_ORANGE;
// console.log(currentColor);

// Ki·ªÉu d·ªØ li·ªáu string
// String l√† ki·ªÉu d·ªØ li·ªáu d√πng ƒë·ªÉ bi·ªÉu di·ªÖn ch·ªØ, vƒÉn b·∫£n, ƒëo·∫°n vƒÉn b·∫£n,...
// C√≥ ba c√°ch ƒë·ªÉ bi·ªÉu di·ªÖn string trong JavaScript:
// D√πng d·∫•u nh√°y ƒë∆°n (')
// D√πng d·∫•u nh√°y k√©p (")
// D√πng d·∫•u "backtick" (`)
// const msg1 = "ƒê√¢y l√† string d√πng d·∫•u nh√°y ƒë∆°n";
// const msg2 = "ƒê√¢y l√† string d√πng d·∫•u nh√°y k√©p";
// const msg3 = `ƒê√¢y l√† string d√πng d·∫•u backtick`;
// D·∫•u nh√°y ƒë∆°n v√† d·∫•u nh√°y k√©p l√† ho√†n to√†n gi·ªëng nhau.
// Ri√™ng v·ªõi d·∫•u "backtick", b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng bi·∫øn, h·∫±ng ho·∫∑c th·∫≠m ch√≠ vi·∫øt m·ªôt bi·ªÉu th·ª©c trong ƒë√≥, v·ªõi c√∫ ph√°p ${‚Ä¶}, v√≠ d·ª•:
// // Truy·ªÅn bi·∫øn v√†o trong d·∫•u "backtick"
// let name = "Lam";
// console.log(`My name is ${name}`); // My name is Lam
// // Truy·ªÅn h·∫±ng v√†o trong d·∫•u "backtick"
// const language = "JavaScript";
// console.log(`You are learning ${language}`); // You are learning JavaScript
// // Truy·ªÅn v√†o bi·ªÉu th·ª©c
// console.log(`1 + 2 = ${1 + 2}`); // 1 + 2 = 3
// String trong JavaScript c√≥ th·ªÉ ch·ªâ g·ªìm 1 k√≠ t·ª± "a", nhi·ªÅu k√≠ t·ª± "abc" ho·∫∑c kh√¥ng k√≠ t·ª± n√†o "" (empty string).

// Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu sang string
// ƒê·ªÉ chuy·ªÉn ƒë·ªïi b·∫•t k·ª≥ ki·ªÉu d·ªØ li·ªáu n√†o sang string, b·∫°n c√≥ th·ªÉ d√πng h√†m String(value).
// console.log(String(1)); // "1"
// console.log(String(NaN)); // "NaN"
// console.log(String(Infinity)); // "Infinity"
// console.log(String(true)); // "true"
// console.log(String(false)); // "false"
// console.log(String(null)); // "null"
// console.log(String(undefined)); // "undefined"
// B·∫°n c√≥ th·∫•y r·∫±ng, chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu sang string kh√° ƒë∆°n gi·∫£n v·ªÅ d·ªÖ hi·ªÉu ph·∫£i kh√¥ng?
// Ch·ªâ c·∫ßn th√™m c·∫∑p d·∫•u nh√°y k√©p "" l√† xong. C√≤n v·ªÅ h√¨nh th·ª©c th√¨ m·ªçi th·ª© v·∫´n gi·ªØ nguy√™n.

// Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu sang number
// Khi th·ª±c hi·ªán t√≠nh to√°n, JavaScript s·∫Ω chuy·ªÉn ƒë·ªïi c√°c ki·ªÉu d·ªØ li·ªáu v·ªÅ ki·ªÉu d·ªØ li·ªáu number.
// V√≠ d·ª• ph√©p chia gi·ªØa hai string:
// console.log("10" / "2"); // 5
// B·ªüi v√¨ string "10" v√† "2" ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi v·ªÅ ki·ªÉu number th√†nh s·ªë 10 v√† s·ªë 2. N√™n k·∫øt qu·∫£ thu ƒë∆∞·ª£c l√† 5.
// ƒê·ªÉ chuy·ªÉn ƒë·ªïi b·∫•t k·ª≥ ki·ªÉu d·ªØ li·ªáu n√†o th√†nh number, b·∫°n c√≥ th·ªÉ d√πng h√†m Number(value), v√≠ d·ª•:
// console.log(Number("")); // 0
// console.log(Number("Hello")); // NaN
// console.log(Number("10")); // 10
// console.log(Number(" ")); // 0
// console.log(Number(" 99 ")); // 99
// console.log(Number(true)); // 1
// console.log(Number(false)); // 0
// console.log(Number(null)); // 0
// console.log(Number(undefined)); // NaN
// B·∫°n ƒë·ªÉ √Ω m·ªôt s·ªë quy lu·∫≠t khi chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu v·ªÅ number nh∆∞ sau:
// null chuy·ªÉn v·ªÅ number th√†nh 0.
// undefined chuy·ªÉn v·ªÅ number th√†nh NaN.
// true chuy·ªÉn v·ªÅ number th√†nh 1.
// false chuy·ªÉn v·ªÅ number th√†nh 0.
// M·ªôt gi√° tr·ªã string sau khi b·ªè ƒëi d·∫•u c√°ch ("whitespace") ·ªü ƒë·∫ßu v√† cu·ªëi string, n·∫øu th√†nh ph·∫ßn c√≤n l·∫°i m√† l√†:
// String r·ªóng "" th√¨ chuy·ªÉn v·ªÅ th√†nh s·ªë 0.
// String kh√°c r·ªóng v√† c√≥ th·ªÉ chuy·ªÉn v·ªÅ number th√¨ s·∫Ω bi·∫øn th√†nh s·ªë t∆∞∆°ng ·ª©ng.
// String kh√°c r·ªóng v√† kh√¥ng th·ªÉ chuy·ªÉn v·ªÅ number th√¨ tr·ªü th√†nh NaN.

// Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu sang boolean
// ƒê·ªÉ chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu sang boolean, b·∫°n c√≥ th·ªÉ d√πng h√†m Boolean(value).
// Quy lu·∫≠t chuy·ªÉn ƒë·ªïi sang boolean nh∆∞ sau:
// Nh·ªØng gi√° tr·ªã "empty" nh∆∞: s·ªë 0, string r·ªóng "", null, undefined v√† NaN s·∫Ω tr·ªü th√†nh false.
// Nh·ªØng gi√° tr·ªã c√≤n l·∫°i s·∫Ω tr·ªü th√†nh true.
// console.log(Boolean(0)); // false
// console.log(Boolean(1)); // true
// console.log(Boolean(10n)); // true
// console.log(Boolean(Infinity)); // true
// console.log(Boolean("")); // false
// console.log(Boolean("hello")); // true
// console.log(Boolean("  ")); // true
// console.log(Boolean(NaN)); // false
// console.log(Boolean(undefined)); // false

// alert(message);
// alert("Say hello from kungfutech.edu.vn");

// const result = confirm("B·∫°n mu·ªën ti·∫øp t·ª•c s·ª≠ d·ª•ng ch∆∞∆°ng tr√¨nh?");
// alert(result);

// const age = prompt("How old are you!", 18);
// alert("You are " + age + " years old!");

// console.log("5" + 2); // "52"
// console.log("5" - 2); // 3
// console.log("5" * 2); // 10
// console.log("5" / 2); // 2.5
// console.log("5a" % "2"); // NaN
// console.log("5b" ** "2"); // NaN

// let n = 4;
// n += 5;
// console.log(n);
// to√°n t·ª≠ ++ v√† -- ch·ªâ d√πng ƒë∆∞·ª£c v·ªõi bi·∫øn. N·∫øu b·∫°n d√πng n√≥ tr·ª±c ti·∫øp v·ªõi gi√° tr·ªã, ki·ªÉu nh∆∞ 4++ hay --3 th√¨ b·∫°n s·∫Ω b·ªã l·ªói c√∫ ph√°p.

// let a = 2;
// let x = a++;
// console.log(a); // 3
// console.log(x); // 2
// console.log(a);//3

// To√°n t·ª≠ d·∫•u ph·∫©y
// To√°n t·ª≠ d·∫•u ph·∫©y cho ph√©p th·ª±c hi·ªán m·ªôt v√†i bi·ªÉu th·ª©c (c√°ch nhau b·∫±ng d·∫•u ph·∫©y), nh∆∞ng k·∫øt qu·∫£ th√¨ ch·ªâ l·∫•y ·ªü bi·ªÉu th·ª©c cu·ªëi c√πng.
// V√≠ d·ª•:
// let a = 1;
// let x = ((a = a + 1), a + 4);
// console.log(a); // 2
// console.log(x); // 6

// ƒê·ªÉ so s√°nh hai k√≠ t·ª± v·ªõi nhau, JavaScript so s√°nh gi√° tr·ªã c·ªßa hai k√≠ t·ª± (d·∫°ng s·ªë) ·ªü b·∫£ng m√£ Unicode.
// Trong b·∫£ng m√£ n√†y, ta c√≥ th·ª© t·ª± 0 < 9 < A < Z < a < z.
// Ngo√†i vi·ªác so s√°nh c√°c ch·ªØ c√°i Latinh ra th√¨ JavaScript c√≤n c√≥ th·ªÉ so s√°nh c√°c ch·ªØ c√°i kh√¥ng ph·∫£i Latinh.


// Khi so s√°nh c√°c to√°n h·∫°ng kh√°c ki·ªÉu d·ªØ li·ªáu, JavaScript chuy·ªÉn ƒë·ªïi gi√° tr·ªã c√°c to√°n h·∫°ng ra d·∫°ng s·ªë, v√≠ d·ª•:
// console.log("5" > 4); // true, v√¨ "5" chuy·ªÉn th√†nh 5
// console.log("01" == 1); // true, v√¨ "01" chuy·ªÉn th√†nh 1
// console.log("11" == 1); // false, v√¨ "11" chuy·ªÉn th√†nh 11
// ƒê·ªëi v·ªõi ki·ªÉu d·ªØ li·ªáu boolean, true s·∫Ω chuy·ªÉn th√†nh 1 v√† false chuy·ªÉn th√†nh 0.
// console.log(true == 1); // true
// console.log(false == 0); // true
// Vi·ªác so s√°nh kh√°c ki·ªÉu d·ªØ li·ªáu s·ª≠ d·ª•ng to√°n t·ª≠ b·∫±ng "kh√¥ng nghi√™m ng·∫∑t" == d·∫´n ƒë·∫øn m·ªôt s·ªë tr∆∞·ªùng h·ª£p "phi logic", v√≠ d·ª•:
// console.log("" == 0); // true
// console.log("0" == 0); // true
// console.log("" == "0"); // false
// K√¨ l·∫° ph·∫£i kh√¥ng?N·∫øu theo t√≠nh ch·∫•t "b·∫Øc c·∫ßu" trong to√°n h·ªçc th√¨ n·∫øu "" == 0 l√† true v√† "0" == 0 l√† true, suy ra "" == "0" c≈©ng ph·∫£i l√† true (v√¨ c√πng b·∫±ng 0).Nh∆∞ng th·ª±c t·∫ø l·∫°i kh√¥ng ph·∫£i nh∆∞ v·∫≠y, hai ph√©p so s√°nh ƒë·∫ßu ti√™n l√† so s√°nh kh√°c ki·ªÉu d·ªØ li·ªáu, n√™n "" v√† "0" ƒë·ªÅu ƒë∆∞·ª£c chuy·ªÉn th√†nh d·∫°ng s·ªë v√† b·∫±ng 0.Trong khi ph√©p so s√°nh th·ª© ba l√† so s√°nh c√πng ki·ªÉu d·ªØ li·ªáu, n√™n kh√¥ng c√≥ qu√° tr√¨nh chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu x·∫£y ra. D·∫´n ƒë·∫øn, k·∫øt qu·∫£ c·ªßa ph√©p so s√°nh cu·ªëi l√† false.ƒê·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·∫ø n√†y, JavaScript t·∫°o ra to√°n t·ª≠ so s√°nh b·∫±ng "nghi√™m ng·∫∑t" ===.

// So s√°nh b·∫±ng nghi√™m ng·∫∑t
// ƒê·ªëi v·ªõi to√°n t·ª≠ so s√°nh b·∫±ng "nghi√™m ng·∫∑t", JavaScript s·∫Ω kh√¥ng th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu.N√≥i c√°ch kh√°c, hai gi√° tr·ªã kh√°c ki·ªÉu d·ªØ li·ªáu th√¨ lu√¥n kh√°c nhau, v√≠ d·ª•:
// // So s√°nh b·∫±ng kh√¥ng nghi√™m ng·∫∑t
// console.log("" == 0); // true
// // So s√°nh b·∫±ng nghi√™m ng·∫∑t
// console.log("" === 0); // false
// T∆∞∆°ng t·ª± v·ªõi so s√°nh b·∫±ng nghi√™m ng·∫∑t, JavaScript c≈©ng c√≥ so s√°nh kh√°c nghi√™m ng·∫∑t, v√≠ d·ª•:
// // So s√°nh kh√°c kh√¥ng nghi√™m ng·∫∑t
// console.log("" != 0); // false
// // So s√°nh kh√°c nghi√™m ng·∫∑t
// console.log("" !== 0); // true
// üí° ƒê·ªÉ tr√°nh m·∫Øc ph·∫£i nh·ªØng l·ªói sai ng·ªõ ng·∫©n khi so s√°nh trong JavaScript, b·∫°n n√™n s·ª≠ d·ª•ng to√°n t·ª≠ so s√°nh b·∫±ng "nghi√™m ng·∫∑t" === v√† to√°n t·ª≠ so s√°nh kh√°c "nghi√™m ng·∫∑t" !==.


// ƒê·ªÉ tr√°nh nh·ªØng t√¨nh hu·ªëng "phi logic" tr√™n, b·∫°n ch·ªâ n√™n so s√°nh null ho·∫∑c undefined khi s·ª≠ d·ª•ng to√°n t·ª≠ so s√°nh b·∫±ng "nghi√™m ng·∫∑t" (===) ho·∫∑c to√°n t·ª≠ so s√°nh kh√°c "nghi√™m ng·∫∑t" (!==).
// Kh√¥ng n√™n s·ª≠ d·ª•ng to√°n t·ª≠ >, <, >= v√† <= v·ªõi null v√† undefined.
// Tr∆∞·ªùng h·ª£p m·ªôt bi·∫øn c√≥ th·ªÉ null ho·∫∑c undefined th√¨ b·∫°n n√™n ki·ªÉm tra gi√° tr·ªã c√≥ b·∫±ng null ho·∫∑c undefined hay kh√¥ng ƒë·ªÉ x·ª≠ l√Ω tr∆∞·ªõc. Khi bi·∫øn kh√°c null v√† undefined r·ªìi th√¨ m·ªõi th·ª±c hi·ªán so s√°nh v·ªõi c√°c to√°n t·ª≠ >, <, >= v√† <= sau.


// Th·ª© t·ª± ∆∞u ti√™n c·ªßa c√°c to√°n t·ª≠ so s√°nh
// C√°c to√°n t·ª≠ so s√°nh c√≥ th·ª© t·ª± ∆∞u ti√™n gi·ªëng nhau. Khi trong bi·ªÉu th·ª©c c√≥ nhi·ªÅu to√°n t·ª≠ so s√°nh, th·ª© t·ª± th·ª±c hi·ªán l√† t·ª´ tr√°i sang ph·∫£i.
// console.log(3 > 2 > 1); // false
// Tho·∫°t ƒë·∫ßu nh√¨n qua, b·∫°n s·∫Ω th·∫•y k·∫øt qu·∫£ tr√™n l√† v√¥ l√Ω ph·∫£i kh√¥ng?V√¨ theo to√°n h·ªçc th√¨ ch·∫Øc ch·∫Øn s·ªë 3 l·ªõn h∆°n s·ªë 2 v√† s·ªë 2 l·ªõn h∆°n s·ªë 1, n√™n k·∫øt qu·∫£ (2) ph·∫£i b·∫±ng true m·ªõi h·ª£p l√Ω.Nh∆∞ng n·∫øu b·∫°n √°p d·ª•ng ƒë√∫ng quy t·∫Øc th·ª© t·ª± ∆∞u ti√™n v√†o ƒë√¢y, b·∫°n s·∫Ω th·∫•y k·∫øt qu·∫£ tr√™n l√† ho√†n to√†n ƒë√∫ng.V√¨ JavaScript s·∫Ω th·ª±c hi·ªán so s√°nh hai s·ªë ƒë·∫ßu ti√™n tr∆∞·ªõc, 3 > 2 l√† ƒë√∫ng n√™n k·∫øt qu·∫£ c·ªßa ph√©p so s√°nh n√†y l√† true. Khi ƒë√≥, m√¨nh c√≥ th·ªÉ vi·∫øt l·∫°i nh∆∞ sau:
// console.log(true > 1); // false
// R√µ r√†ng, ƒë√¢y l√† ph√©p so s√°nh hai ki·ªÉu d·ªØ li·ªáu kh√°c nhau. V√¨ v·∫≠y, true ƒë∆∞·ª£c chuy·ªÉn th√†nh d·∫°ng s·ªë v√† b·∫±ng 1. M√† 1 > 1 l√† false.T√≥m l·∫°i, k·∫øt qu·∫£ c·ªßa ph√©p so s√°nh tr√™n l√† false.
// Khi th·ª±c hi·ªán t√≠nh to√°n, so s√°nh v·ªõi c√°c to√°n t·ª≠, b·∫°n ph·∫£i ghi nh·ªõ th·ª© t·ª± ∆∞u ti√™n c·ªßa c√°c to√°n t·ª≠ ƒë·ªÉ bi·∫øt ch√≠nh x√°c th·ª© t·ª± th·ª±c hi·ªán c·ªßa c√°c ph√©p to√°n.
// Tr∆∞·ªùng h·ª£p b·∫°n kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ th·ª© t·ª± th·ª±c hi·ªán, b·∫°n n√™n s·ª≠ d·ª•ng c·∫∑p d·∫•u ngo·∫∑c ƒë∆°n (...) (to√°n t·ª≠ nh√≥m) ƒë·ªÉ th·ª±c hi·ªán ph√©p to√°n m·ªôt c√°ch ch√≠nh x√°c.
// ƒêo·∫°n code tr√™n c√≥ th·ªÉ vi·∫øt l·∫°i th√†nh console.log((3 > 2) > 1). ·ªû ƒë√¢y, m√¨nh ƒë√£ nh√≥m 3 > 2 th√†nh m·ªôt nh√≥m, n√™n ch·∫Øc ch·∫Øn ph√©p to√°n n√†y th·ª±c hi·ªán tr∆∞·ªõc.
// N·∫øu mu·ªën 2 > 1 th·ª±c hi·ªán tr∆∞·ªõc b·∫°n vi·∫øt l·∫°i th√†nh console.log(3 > (2 > 1)). K·∫øt qu·∫£ c·ªßa c√¢u l·ªánh n√†y l√† true.


// T·ªïng k·∫øt
// Sau ƒë√¢y l√† nh·ªØng ki·∫øn th·ª©c c∆° b·∫£n c·∫ßn nh·ªõ v·ªÅ to√°n t·ª≠ so s√°nh trong JavaScript:
// To√°n t·ª≠ so s√°nh l√† to√°n t·ª≠ hai ng√¥i d√πng ƒë·ªÉ so s√°nh gi√° tr·ªã c·ªßa hai to√°n h·∫°ng v·ªõi nhau. V√† c√°c to√°n t·ª≠ so s√°nh trong JavaScript bao g·ªìm:
// To√°n t·ª≠ so s√°nh l·ªõn h∆°n > v√† to√°n t·ª≠ so s√°nh nh·ªè h∆°n <.
// To√°n t·ª≠ so s√°nh l·ªõn h∆°n ho·∫∑c b·∫±ng >= v√† to√°n t·ª≠ so s√°nh nh·ªè h∆°n ho·∫∑c b·∫±ng <=.
// To√°n t·ª≠ so s√°nh b·∫±ng "kh√¥ng nghi√™m ng·∫∑t" == v√† to√°n t·ª≠ so s√°nh b·∫±ng "nghi√™m ng·∫∑t" ===.
// To√°n t·ª≠ so s√°nh kh√°c "kh√¥ng nghi√™m ng·∫∑t" != v√† to√°n t·ª≠ so s√°nh kh√°c "nghi√™m ng·∫∑t" !==.
// K·∫øt qu·∫£ c·ªßa ph√©p so s√°nh l√† gi√° tr·ªã ki·ªÉu boolean.
// Khi so s√°nh string, JavaScript th·ª±c hi·ªán so s√°nh t·ª´ng k√≠ t·ª± t·ª´ tr√°i sang ph·∫£i.
// Khi so s√°nh c√°c gi√° tr·ªã v·ªõi ki·ªÉu d·ªØ li·ªáu kh√°c nhau, JavaScript chuy·ªÉn c√°c gi√° tr·ªã ƒë√≥ th√†nh d·∫°ng s·ªë (tr·ª´ tr∆∞·ªùng h·ª£p so s√°nh v·ªõi to√°n t·ª≠ b·∫±ng "nghi√™m ng·∫∑t" === v√† to√°n t·ª≠ kh√°c "nghi√™m ng·∫∑t" !==).
// Hai gi√° tr·ªã null v√† undefined b·∫±ng nhau (khi s·ª≠ d·ª•ng to√°n t·ª≠ ==) v√† lu√¥n kh√°c c√°c gi√° tr·ªã c√≤n l·∫°i.
// Kh√¥ng n√™n s·ª≠ d·ª•ng to√°n t·ª≠ >, <, >= v√† <= v·ªõi null v√† undefined. N·∫øu c√°c bi·∫øn c√≥ th·ªÉ b·∫±ng null ho·∫∑c undefined th√¨ b·∫°n n√™n ki·ªÉm tra gi√° tr·ªã c√≥ b·∫±ng null ho·∫∑c undefined hay kh√¥ng ƒë·ªÉ x·ª≠ l√Ω tr∆∞·ªõc. Khi bi·∫øn kh√°c null v√† undefined r·ªìi th√¨ m·ªõi th·ª±c hi·ªán so s√°nh v·ªõi c√°c to√°n t·ª≠ >, <, >= v√† <= sau.
// Th·ª© t·ª± ∆∞u ti√™n c·ªßa c√°c to√°n t·ª≠ so s√°nh l√† gi·ªëng nhau. N·∫øu trong c√¢u l·ªánh c√≥ nhi·ªÅu to√°n t·ª≠ so s√°nh th√¨ th·ª© t·ª± th·ª±c hi·ªán l√† t·ª´ tr√°i sang ph·∫£i.

// K·∫øt qu·∫£ c·ªßa c√°c ph√©p so s√°nh sau l√† g√¨?
// console.log(15 > 9); // (1)
// console.log("no" <= "none"); // (2)
// console.log("3" >= "24"); // (3)
// console.log("3" > 24); // (4)
// console.log(null < undefined); // (5)
// console.log(undefined == null); // (6)
// console.log(undefined === null); // (7)
// console.log(null == "\n0\n"); // (8)
// console.log(null === +"\n0\n"); // (9)
// console.log(null > -1); // (10)
// Xem ƒë√°p √°n
// console.log(15 > 9); // true
// console.log("no" <= "none"); // true
// console.log("3" >= "24"); // true
// console.log("3" > 24); // false
// console.log(null < undefined); // false
// console.log(undefined == null); // true
// console.log(undefined === null); // false
// console.log(null == "\n0\n"); // false
// console.log(null === +"\n0\n"); // false
// console.log(null >= -1); // true
// Gi·∫£i th√≠ch:
// Hi·ªÉn nhi√™n s·ªë 15 l·ªõn h∆°n s·ªë 9.
// ƒê√¢y l√† so s√°nh hai string. Quy tr√¨nh l√† so s√°nh k√≠ t·ª± l·∫ßn l∆∞·ª£t t·ª´ tr√°i sang ph·∫£i. Th√†nh ph·∫ßn "no" gi·ªëng nhau. Suy ra "none" l·ªõn h∆°n "no" v√¨ "none" nhi·ªÅu k√≠ t·ª± h∆°n.
// ƒê√¢y c≈©ng l√† so s√°nh hai string. K√≠ t·ª± ƒë·∫ßu ti√™n "3" l·ªõn h∆°n k√≠ t·ª± "2" n√™n suy ra "3" l·ªõn h∆°n "24".
// ƒê√¢y l√† so s√°nh hai ki·ªÉu d·ªØ li·ªáu kh√°c nhau. Do ƒë√≥, string "3" s·∫Ω chuy·ªÉn th√†nh s·ªë 3. Hi·ªÉn nhi√™n s·ªë 3 nh·ªè h∆°n s·ªë 24.
// Hai gi√° tr·ªã null v√† undefined ch·ªâ b·∫±ng nhau khi s·ª≠ d·ª•ng to√°n t·ª≠ ==. C√≤n l·∫°i s·∫Ω kh√°c nhau v√† kh√°c c√°c gi√° tr·ªã kh√°c. N√™n k·∫øt qu·∫£ l√† false.
// Gi·∫£i th√≠ch t∆∞∆°ng t·ª± nh∆∞ (5).
// Gi·∫£i th√≠ch t∆∞∆°ng t·ª± nh∆∞ (5).
// Gi·∫£i th√≠ch t∆∞∆°ng t·ª± nh∆∞ (5).
// Gi·∫£i th√≠ch t∆∞∆°ng t·ª± nh∆∞ (5).
// Khi s·ª≠ d·ª•ng to√°n t·ª≠ > gi·ªØa null v√† m·ªôt s·ªë, gi√° tr·ªã null s·∫Ω chuy·ªÉn th√†nh d·∫°ng s·ªë v√† b·∫±ng s·ªë 0. M√† hi·ªÉn nhi√™n, s·ªë 0 s·∫Ω l·ªõn h∆°n s·ªë -1. V√¨ v·∫≠y, ƒë√°p √°n l√† true.


// console.log(false || false || true);

// const hour = 20;
// if (hour < 9 || hour > 17) {
//   console.log("Ngo√†i gi·ªù l√†m vi·ªác"); // c√¢u l·ªánh n√†y ƒë∆∞·ª£c th·ª±c hi·ªán
// }

// const fullName = "";
// const nickName = "jsDev";
// const displayName = fullName ||  "Ng∆∞·ªùi d√πng ·∫©n danh" ||nickName ;
// console.log(displayName); // jsDev

// true || console.log("C√¢u l·ªánh n√†y kh√¥ng ƒë∆∞·ª£c th·ª±c hi·ªán"); // (1)
// false || console.log("C√¢u l·ªánh n√†y ƒë∆∞·ª£c th·ª±c hi·ªán"); // (2)

// console.log(1 && 0); // 0 (gi√° tr·ªã falsy ƒë·∫ßu ti√™n l√† 0)
// console.log(null && 2); // null (gi√° tr·ªã falsy ƒë·∫ßu ti√™n l√† null)
// console.log(10 && "" && undefined && 0); // "" (gi√° tr·ªã falsy ƒë·∫ßu ti√™n l√† "")
// console.log("n" && undefined && 10); // undefined (gi√° tr·ªã falsy ƒë·∫ßu ti√™n l√† undefined)
// console.log(10 && "a"); // "a" (kh√¥ng c√≥ gi√° tr·ªã falsy, tr·∫£ v·ªÅ gi√° tr·ªã cu·ªëi c√πng)


// console.log(null || NaN || 0 || null);


// C√¢u l·ªánh if
// C√¢u l·ªánh if(...) s·∫Ω ki·ªÉm tra ƒëi·ªÅu ki·ªán bi·ªÉu th·ª©c b√™n trong c·∫∑p d·∫•u ngo·∫∑c ƒë∆°n (). N·∫øu k·∫øt qu·∫£ l√† true th√¨ m·ªôt kh·ªëi code s·∫Ω ƒë∆∞·ª£c th·ª±c thi.
// V√≠ d·ª• v·ªÅ c√¢u l·ªánh if:
// const x = 2;
// if (x % 2 === 0) console.log("x is an even number");
// V√¨ x = 2 n√™n x chia 2 d∆∞ 0. Do ƒë√≥, x % 2 === 0 l√† true. V√¨ v·∫≠y, c√¢u l·ªánh console.log tr√™n ƒë∆∞·ª£c th·ª±c hi·ªán.
// ƒê·ªÉ th·ª±c hi·ªán nhi·ªÅu c√¢u l·ªánh, b·∫°n s·ª≠ d·ª•ng c·∫∑p d·∫•u {}:
// const x = 2;
// if (x % 2 === 0) {
//   console.log("x is an even number");
//   console.log("done!");
// }
// K·∫øt qu·∫£
// x is an even number done!
// üí° Theo m√¨nh, d√π kh·ªëi code sau c√¢u l·ªánh if l√† m·ªôt hay nhi·ªÅu c√¢u l·ªánh th√¨ b·∫°n c≈©ng n√™n d√πng c·∫∑p d·∫•u {} ƒë·ªÉ code d·ªÖ ƒë·ªçc h∆°n. Ngo√†i ra, m√¨nh c≈©ng nh·∫Øc l·∫°i quy lu·∫≠t chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu sang boolean nh∆∞ sau:
// Nh·ªØng gi√° tr·ªã "empty" nh∆∞: s·ªë 0, string r·ªóng "", null, undefined v√† NaN s·∫Ω tr·ªü th√†nh false.
// Nh·ªØng gi√° tr·ªã c√≤n l·∫°i s·∫Ω tr·ªü th√†nh true.
// V√¨ v·∫≠y, kh·ªëi l·ªánh v·ªõi ƒëi·ªÅu ki·ªán sau s·∫Ω kh√¥ng bao gi·ªù ƒë∆∞·ª£c th·ª±c thi:
// // 0 l√† gi√° tr·ªã falsy
// if (0) {
//   // c√°c c√¢u l·ªánh
// }
// Ng∆∞·ª£c l·∫°i, kh·ªëi l·ªánh v·ªõi ƒëi·ªÅu ki·ªán sau l·∫°i lu√¥n lu√¥n ƒë∆∞·ª£c th·ª±c thi:
// // 1 l√† gi√° tr·ªã truthy
// if (1) {
//   // c√°c c√¢u l·ªánh
// }
// Ngo√†i ra, b·∫°n c√≥ th·ªÉ t√≠nh to√°n gi√° tr·ªã c·ªßa ƒëi·ªÅu ki·ªán tr∆∞·ªõc khi d√πng if:
// const x = 2;
// const result = x % 2 === 0; // k·∫øt qu·∫£ l√† true
// if (result) {
//   console.log("x is an even number"); // c√¢u l·ªánh n√†y ƒë∆∞·ª£c th·ª±c thi
// }
// M·ªánh ƒë·ªÅ else
// ƒêi theo c√¢u l·ªánh if c√≤n c√≥ m·ªánh ƒë·ªÅ else - d√πng ƒë·ªÉ th·ª±c hi·ªán m·ªôt kh·ªëi l·ªánh khi ƒëi·ªÅu ki·ªán trong if l√† gi√° tr·ªã falsy.
// Ti·∫øp theo v√≠ d·ª• tr√™n:
// const x = 3;
// if (x % 2 === 0) {
//   console.log("x is an even number");
// } else {  console.log("x is an odd number"); // c√¢u l·ªánh n√†y ƒë∆∞·ª£c th·ª±c thi}
// V√¨ x = 3 n√™n x chia 2 d∆∞ 1. Do ƒë√≥, x % 2 === 0 l√† false. V√¨ v·∫≠y, kh·ªëi l·ªánh sau else ƒë∆∞·ª£c th·ª±c thi.
// Nhi·ªÅu m·ªánh ƒë·ªÅ else if n·ªëi ti·∫øp
// Trong tr∆∞·ªùng h·ª£p, b·∫°n c·∫ßn ki·ªÉm tra nhi·ªÅu ƒëi·ªÅu ki·ªán li√™n ti·∫øp nhau th√¨ c√≥ th·ªÉ d√πng nhi·ªÅu m·ªánh ƒë·ªÅ else if n·ªëi ti·∫øp nhau.
// const age = 24;
// if (age < 18) {
//   console.log("Too young!");
// } else if (age > 50) {
//   console.log("Too old!");
// } else {
//   console.log("OK!");
// }
// // OK!
// ƒêo·∫°n code tr√™n ki·ªÉm tra ƒëi·ªÅu ki·ªán age < 18 ƒë·∫ßu ti√™n. N·∫øu ƒë√∫ng th√¨ c√¢u l·ªánh console.log ƒë·∫ßu ti√™n ƒë∆∞·ª£c th·ª±c thi. N·∫øu sai th√¨ ki·ªÉm tra ti·∫øp ƒë·∫øn ƒëi·ªÅu ki·ªán age > 50. N·∫øu ƒë√∫ng th√¨ c√¢u l·ªánh console.log th·ª© hai ƒë∆∞·ª£c th·ª±c thi. N·∫øu v·∫´n sai th√¨ c√¢u l·ªánh console.log cu·ªëi c√πng ƒë∆∞·ª£c th·ª±c thi.
// ·ªû ƒë√¢y, age = 24 n√™n age < 18 v√† age > 50 ƒë·ªÅu l√† false. V√¨ v·∫≠y, c√¢u l·ªánh console.log cu·ªëi c√πng ƒë∆∞·ª£c th·ª±c thi.
// Ch√∫ √Ω: M·ªánh ƒë·ªÅ else cu·ªëi c√πng kh√¥ng b·∫Øt bu·ªôc ph·∫£i c√≥.
// V√≠ d·ª• tr√™n khi b·ªè m·ªánh ƒë·ªÅ else cu·ªëi c√πng:
// const age = 24;
// if (age < 18) {
//   console.log("Too young!");
// } else if (age > 50) {
//   console.log("Too old!");
// }
// L·∫ßn n√†y, kh√¥ng c√≥ ƒëi·ªÅu ki·ªán n√†o th·ªèa m√£n, n√™n kh√¥ng c√¢u l·ªánh console n√†o ƒë∆∞·ª£c th·ª±c thi.
// To√°n t·ª≠ r·∫Ω nh√°nh
// Sau ƒë√¢y l√† nh·ªØng ki·∫øn th·ª©c c∆° b·∫£n c·∫ßn nh·ªõ v·ªÅ to√°n t·ª≠ r·∫Ω nh√°nh ? trong JavaScript.
// To√°n t·ª≠ r·∫Ω nh√°nh ?
// Trong nhi·ªÅu tr∆∞·ªùng h·ª£p, b·∫°n c·∫ßn g√°n gi√° tr·ªã cho m·ªôt bi·∫øn d·ª±a tr√™n m·ªôt ƒëi·ªÅu ki·ªán, v√≠ d·ª•:
// const age = 24;
// let enoughAge;
// if (age < 18) {
//   enoughAge = false;
// } else {
//   enoughAge = true;
// }
// console.log(enoughAge); // true
// ƒê·ªÉ ƒë∆°n gi·∫£n h∆°n, b·∫°n c√≥ th·ªÉ d√πng to√°n t·ª≠ r·∫Ω nh√°nh ? (ho·∫∑c c√≥ th·ªÉ g·ªçi l√† to√°n t·ª≠ d·∫•u h·ªèi), v·ªõi c√∫ ph√°p:
// const result = condition ? value1 : value2;
// ƒê√¢y l√† to√°n t·ª≠ ba ng√¥i v·ªõi ba th√†nh ph·∫ßn:
// "condition": ƒëi·ªÅu ki·ªán c·∫ßn ki·ªÉm tra
// "value1": gi√° tr·ªã tr·∫£ v·ªÅ n·∫øu ƒëi·ªÅu ki·ªán "condition" l√† truthy.
// "value2": gi√° tr·ªã tr·∫£ v·ªÅ n·∫øu ƒëi·ªÅu ki·ªán "condition" l√† falsy.
// V√≠ d·ª• tr√™n tr·ªü th√†nh:
// const age = 24;
// const enoughAge = age < 18 ? false : true;
// console.log(enoughAge); // true
// Ngo√†i ra, b·∫°n c√≥ th·ªÉ d√πng c·∫∑p d·∫•u ngo·∫∑c ƒë∆°n () cho d·ªÖ nh√¨n (v√† ch·∫Øc ch·∫Øn h∆°n - khi b·∫°n kh√¥ng r√µ v·ªÅ th·ª© t·ª± ∆∞u ti√™n c·ªßa c√°c to√°n t·ª≠):
// const age = 24;
// const enoughAge = age < 18 ? false : true;
// console.log(enoughAge); // true
// ƒê√¢y ch·ªâ l√† v√≠ d·ª• minh h·ªça. Th·ª±c t·∫ø trong tr∆∞·ªùng h·ª£p n√†y, b·∫°n c√≥ th·ªÉ code ƒë∆°n gi·∫£n h∆°n nh∆∞ sau:
// const age = 24;
// const enoughAge = age >= 18;
// console.log(enoughAge); // true
// Nhi·ªÅu to√°n t·ª≠ ?
// C√πng xem l·∫°i v√≠ d·ª• v·ªÅ nhi·ªÅu m·ªánh ƒë·ªÅ else if b√™n tr√™n:
// const age = 24;
// if (age < 18) {
//   console.log("Too young!");
// } else if (age > 50) {
//   console.log("Too old!");
// } else {
//   console.log("OK!");
// }
// B·∫°n c√≥ th·ªÉ s·ª≠a l·∫°i b·∫±ng c√°ch s·ª≠ d·ª•ng nhi·ªÅu to√°n t·ª≠ ? nh∆∞ sau:
// const age = 24;
// const message = age < 18 ? "Too young!" : age > 50 ? "Too old!" : "OK!";
// console.log(message); // OK!
// Tho·∫°t nh√¨n th√¨ c√≥ v·∫ª ph·ª©c t·∫°p, nh∆∞ng b·∫°n c√≥ th·ªÉ ph√¢n t√≠ch k·ªπ ra nh∆∞ sau s·∫Ω hi·ªÉu:
// D·∫•u ? ƒë·∫ßu ti√™n ki·ªÉm tra ƒëi·ªÅu ki·ªán age < 18.
// N·∫øu ƒë√∫ng th√¨ tr·∫£ v·ªÅ "Too young!".
// N·∫øu sai th√¨ ti·∫øp t·ª•c x·ª≠ l√Ω th√†nh ph·∫ßn sau d·∫•u : ƒë·∫ßu ti√™n.
// Ti·∫øp t·ª•c, d·∫•u ? th·ª© hai ki·ªÉm tra ƒëi·ªÅu ki·ªán age > 50.
// N·∫øu ƒë√∫ng th√¨ tr·∫£ v·ªÅ "Too old!".
// N·∫øu sai th√¨ ti·∫øp t·ª•c x·ª≠ l√Ω th√†nh ph·∫ßn sau d·∫•u : th·ª© hai.
// Cu·ªëi c√πng, khi c√°c ƒëi·ªÅu ki·ªán tr√™n ƒë·ªÅu false th√¨ s·∫Ω tr·∫£ v·ªÅ "OK!".


// const value = prompt("Nh·∫≠p v√†o s·ªë nguy√™n d∆∞∆°ng ch·∫µn:", 0);
//       if (value % 2 === 0) {
//         alert("B·∫°n ƒë√£ nh·∫≠p ƒë√∫ng!");
//       } else {
//         alert("B·∫°n ƒë√£ nh·∫≠p sai!");
//       }

      // let a = 10;
      // let b = 20;
      // let result;
      // if (a + b < 10) {
      //   result = "Small";
      // } else {
      //   result = "Big";
      // }
      // console.log(result);
// result = ( a + b ) < 10 ? "Small" : "Big";
// console.log(result);
// let x;
// let y;
// const sum = x ?? y;
// console.log(sum);

// L·ªánh switch case l√† g√¨?
// C√¢u l·ªánh switch - case trong JavaScript l√† m·ªôt c·∫•u tr√∫c r·∫Ω nh√°nh d√πng ƒë·ªÉ x√°c ƒë·ªãnh m·ªôt danh s√°ch c√°c tr∆∞·ªùng h·ª£p v√† kh·ªëi l·ªánh t∆∞∆°ng ·ª©ng v·ªõi m·ªói tr∆∞·ªùng h·ª£p.
// Khi gi√° tr·ªã ƒëang x√©t b·∫±ng nghi√™m ng·∫∑t (===) v·ªõi tr∆∞·ªùng h·ª£p n√†o th√¨ kh·ªëi l·ªánh t∆∞∆°ng ·ª©ng b·∫Øt ƒë·∫ßu t·ª´ tr∆∞·ªùng h·ª£p ƒë√≥ ƒë∆∞·ª£c th·ª±c thi.
// C√∫ ph√°p c√¢u l·ªánh switch case
// L·ªánh switch case trong JS c√≥ c√∫ ph√°p nh∆∞ sau:
// switch(x) {
//   case 'value1':  // if (x === 'value1')
//     ...
//     [break]
//   case 'value2':  // if (x === 'value2')
//     ...
//     [break]
//   default:
//     ...
//     [break]
// }
// Trong ƒë√≥:
// Gi√° tr·ªã x ƒë∆∞·ª£c ki·ªÉm tra b·∫±ng nghi√™m ng·∫∑t l·∫ßn l∆∞·ª£t v·ªõi c√°c gi√° tr·ªã value1, value2,...
// Khi t√¨m th·∫•y gi√° tr·ªã value th·ªèa m√£n th√¨ kh·ªëi l·ªánh b·∫Øt ƒë·∫ßu t·ª´ case ƒë√≥ ƒë∆∞·ª£c th·ª±c hi·ªán cho ƒë·∫øn khi g·∫∑p t·ª´ kh√≥a break g·∫ßn nh·∫•t, ho·∫∑c k·∫øt l√∫c l·ªánh switch case.
// N·∫øu kh√¥ng c√≥ tr∆∞·ªùng h·ª£p n√†o th·ªèa m√£n th√¨ kh·ªëi l·ªánh ·ª©ng v·ªõi default ƒë∆∞·ª£c th·ª±c thi.
// Ch√∫ √Ω: t·ª´ kh√≥a break l√† kh√¥ng b·∫Øt bu·ªôc.
// V√≠ d·ª• l·ªánh switch case
// Sau ƒë√¢y l√† v√≠ d·ª• s·ª≠ d·ª•ng l·ªánh switch case trong JavaScript:
// const x = 2 + 3;
// switch (x) {
//   case 4:
//     console.log("Less than");
//     break;
//   case 5:
//     console.log("Equal");
//     break;
//   case 6:
//     console.log("Greater than");
//     break;
//   default:
//     console.log("Don't know the answer");
// }
// Equal
// K·∫øt qu·∫£
// Equal
// Gi·∫£i th√≠ch:
// L·ªánh switch so s√°nh b·∫±ng nghi√™m ng·∫∑t gi√° tr·ªã c·ªßa x v·ªõi c√°c case l·∫ßn l∆∞·ª£t l√† 4, 5 v√† 6.
// V·ªõi case 4: kh√°c v·ªõi gi√° tr·ªã c·ªßa x (l√† 5), n√™n qu√° tr√¨nh so s√°nh ti·∫øp t·ª•c.
// V·ªõi case 5: gi√° tr·ªã n√†y b·∫±ng nghi√™m ng·∫∑t v·ªõi x, n√™n kh·ªëi l·ªánh b·∫Øt ƒë·∫ßu t·ª´ tr∆∞·ªùng h·ª£p n√†y ƒë∆∞·ª£c th·ª±c thi. V√¨ v·∫≠y, gi√° tr·ªã Equal ƒë∆∞·ª£c in ra.
// Nh∆∞ng ngay sau ƒë√≥ l√† t·ª´ kh√≥a break, n√™n l·ªánh switch case k·∫øt th√∫c.
// N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a break th√¨ sao?
// N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a break th√¨ to√†n b·ªô kh·ªëi l·ªánh ph√≠a sau case 5 ƒë∆∞·ª£c th·ª±c thi.
// const x = 2 + 3;
// switch (x) {
//   case 4:
//     console.log("Less than");
//   case 5:
//     console.log("Equal");
//   case 6:
//     console.log("Greater than");
//   default:
//     console.log("Don't know the answer");
// }
// Equal
// Greater than
// Don't know the answer
// switch v√† case ƒë·ªÅu c√≥ th·ªÉ ch·ª©a bi·ªÉu th·ª©c - kh√¥ng ch·ªâ l√† bi·∫øn hay h·∫±ng.

// V·∫•n ƒë·ªÅ so s√°nh b·∫±ng nghi√™m ng·∫∑t
// M√¨nh mu·ªën nh·∫•n m·∫°nh r·∫±ng l·ªánh switch case s·ª≠ d·ª•ng so s√°nh b·∫±ng nghi√™m ng·∫∑t ===. Nghƒ©a l√† c√°c gi√° tr·ªã ph·∫£i c√πng ki·ªÉu d·ªØ li·ªáu.
// V√≠ d·ª•:
// let x = 3;
// switch (x) {
//   case "3":
//     console.log("string");
//     break;
//   case 3:
//     console.log("number");
//     break;
//   default:
//     console.log("unknown");
//     break;
// }
// number


// B√†i 2
// S·ª≠ d·ª•ng l·ªánh switch case vi·∫øt ƒëo·∫°n code t∆∞∆°ng ·ª©ng v·ªõi ƒëo·∫°n code sau:
// let x = 2;
// if (x === 1) {
//   console.log("x KH√îNG L√Ä s·ªë nguy√™n t·ªë");
// } else if (x === 2) {
//   console.log("x L√Ä s·ªë nguy√™n t·ªë");
// } else if (x === 3) {
//   console.log("x L√Ä s·ªë nguy√™n t·ªë");
// } else if (x === 4) {
//   console.log("x KH√îNG L√Ä s·ªë nguy√™n t·ªë");
// } else if (x === 5) {
//   console.log("x L√Ä s·ªë nguy√™n t·ªë");
// } else if (x === 6) {
//   console.log("x KH√îNG L√Ä s·ªë nguy√™n t·ªë");
// } else {
//   console.log("CH∆ØA R√ï!");
// }
// Xem ƒë√°p √°n
// B·∫°n th·∫•y r·∫±ng, c√≥ m·ªôt v√†i tr∆∞·ªùng h·ª£p x·ª≠ l√Ω gi·ªëng nhau. N√™n m√¨nh c√≥ th·ªÉ nh√≥m c√°c case l·∫°i nh∆∞ sau:
// let x = 2;
// switch (x) {
//   case 2:
//   case 3:
//   case 5:
//     console.log("x L√Ä s·ªë nguy√™n t·ªë");
//     break;
//   case 1:
//   case 4:
//   case 6:
//     console.log("x KH√îNG L√Ä s·ªë nguy√™n t·ªë");
//     break;
//   default:
//     console.log("CH∆ØA R√ï!");
// }

// Bi·∫øn c·ª•c b·ªô trong h√†m
// M·ªôt bi·∫øn ƒë∆∞·ª£c khai b√°o b√™n trong h√†m, ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c b√™n trong th√¢n h√†m ƒë√≥. Bi·∫øn n√†y g·ªçi l√† bi·∫øn c·ª•c b·ªô (hay bi·∫øn ƒë·ªãa ph∆∞∆°ng).
// V√≠ d·ª• v·ªÅ bi·∫øn c·ª•c b·ªô trong JavaScript:
// function sayHello() {
//   const message = "Hello from kungfutech.edu.vn";
//   console.log(message);
// }
// sayHello(); // Hello from kungfutech.edu.vn
// console.log(message); // Uncaught ReferenceError: message is not defined
// Trong v√≠ d·ª• tr√™n, bi·∫øn message l√† bi·∫øn c·ª•c b·ªô b√™n trong h√†m sayHello. T·ª©c l√† bi·∫øn message ch·ªâ d√πng ƒë∆∞·ª£c ·ªü trong th√¢n h√†m sayHello.
// Khi b·∫°n c·ªë g·∫Øng truy c·∫≠p v√†o bi·∫øn message ·ªü ngo√†i h√†m, b·∫°n s·∫Ω b·ªã l·ªói Uncaught ReferenceError: message is not defined.


// Tuy nhi√™n, n·∫øu b√™n trong th√¢n h√†m khai b√°o m·ªôt bi·∫øn tr√πng t√™n v·ªõi bi·∫øn ngo√†i h√†m th√¨ bi·∫øn ngo√†i h√†m "b·ªã b·ªè qua":

// let message = "Hello from kungfutech.edu.vn";
// function sayHello() {
//    message = "Hi!";
//   console.log(message);
// }
// sayHello(); // Hi!
// console.log(message); // Hello from kungfutech.edu.vn

// Truy·ªÅn tham s·ªë v√†o h√†m
// Trong tr∆∞·ªùng h·ª£p b·∫°n mu·ªën s·ª≠ d·ª•ng gi√° tr·ªã c·ªßa bi·∫øn b√™n ngo√†i v√†o trong th√¢n h√†m, b·∫°n c√≥ th·ªÉ truy·ªÅn tham s·ªë v√†o h√†m (thay v√¨ s·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c).
// V√≠ d·ª• truy·ªÅn tham s·ªë v√†o h√†m:
// function sayHello(message) {
//   console.log(message);
// }
// sayHello("Hello!"); // Hello!
// sayHello("Hi!"); // Hi!
// Khi h√†m sayHello ƒë∆∞·ª£c g·ªçi, gi√° tr·ªã string ƒë∆∞·ª£c sao ch√©p (copy) v√†o bi·∫øn c·ª•c b·ªô message. Trong th√¢n h√†m s·∫Ω s·ª≠ d·ª•ng bi·∫øn c·ª•c b·ªô ƒë√≥.

// üìù S·ªë l∆∞·ª£ng tham s·ªë c·ªßa h√†m l√† kh√¥ng gi·ªõi h·∫°n.
// V√≠ d·ª• h√†m c√≥ nhi·ªÅu tham s·ªë:
// function sayHello(message, site) {
//   console.log(message + " from " + site);
// }
// sayHello("Hello", "kungfutech.edu.vn"); // Hello from kungfutech.edu.vn


// Gi√° tr·ªã tham s·ªë m·∫∑c ƒë·ªãnh
// ƒê·ªëi v·ªõi h√†m c√≥ tham s·ªë m√† khi g·ªçi h√†m, b·∫°n kh√¥ng truy·ªÅn gi√° tr·ªã v√†o th√¨ gi√° tr·ªã c·ªßa tham s·ªë ƒë√≥ l√† undefined, v√≠ d·ª•:
// function sayHello(message, site) {
//   console.log(message + " from " + site);
// }
// sayHello("Hello"); // Hello from undefined
// Trong tr∆∞·ªùng h·ª£p n√†y, b·∫°n c√≥ th·ªÉ ƒë·ªãnh nghƒ©a "gi√° tr·ªã m·∫∑c ƒë·ªãnh" cho tham s·ªë b·∫±ng c√°ch s·ª≠ d·ª•ng to√°n t·ª≠ g√°n = nh∆∞ sau:
// function sayHello(message, site = "kungfutech.edu.vn") {
//   console.log(message + " from " + site);
// }
// sayHello("Hello"); // Hello from kungfutech.edu.vn
// L√∫c n√†y, n·∫øu b·∫°n kh√¥ng truy·ªÅn gi√° tr·ªã v√†o tham s·ªë site th√¨ gi√° tr·ªã c·ªßa n√≥ m·∫∑c ƒë·ªãnh l√† kungfutech.edu.vn.
// Trong v√≠ d·ª• tr√™n, gi√° tr·ªã m·∫∑c ƒë·ªãnh ch·ªâ l√† m·ªôt gi√° tr·ªã string. Tuy nhi√™n, gi√° tr·ªã m·∫∑c ƒë·ªãnh c√≥ th·ªÉ l√† m·ªôt bi·ªÉu th·ª©c ho·∫∑c th·∫≠m ch√≠ l√† m·ªôt h√†m kh√°c, v√≠ d·ª•:
// function aFunction() {
//   // code
// }
// function sayHello(message, site = aFunction()) {
//   console.log(message + " from " + site);
// }
// Trong v√≠ tr√™n, h√†m aFunction() ch·ªâ ƒë∆∞·ª£c g·ªçi khi b·∫°n kh√¥ng truy·ªÅn gi√° tr·ªã cho tham s·ªë site.

// B·∫°n c≈©ng th·∫•y r·∫±ng, hai v·ªã tr√≠ return ƒë·∫ßu ti√™n kh√¥ng c√≥ gi√° tr·ªã n√†o theo sau. Khi ƒë√≥, gi√° tr·ªã tr·∫£ v·ªÅ m·∫∑c ƒë·ªãnh l√† undefined:
// function sum(a, b) {
//   return;
// }
// let r = sum(1, 2);
// console.log(r); // undefined
// Ngo√†i ra, n·∫øu h√†m kh√¥ng c√≥ return th√¨ gi√° tr·ªã tr·∫£ v·ªÅ c≈©ng l√† undefined:
// function sum(a, b) {}
// let r = sum(1, 2);
// console.log(r); // undefined
// kh√¥ng ƒë∆∞·ª£c xu·ªëng d√≤ng ngay sau return. V√¨ JavaScript s·∫Ω hi·ªÉu l√† b·∫°n kh√¥ng return gi√° tr·ªã n√†o c·∫£.
// V√≠ d·ª•:
// function sum(a, b) {
//   return;
//   a + b;
// }
// const result = sum(1, 2);
// console.log(result); // undefined
// Tr√¨nh th√¥ng d·ªãch JavaScript s·∫Ω t·ª± ƒë·ªông th√™m d·∫•u ; ngay sau return. Do ƒë√≥, gi√° tr·ªã tr·∫£ v·ªÅ c·ªßa h√†m tr√™n l√† undefined. V√† th√†nh ph·∫ßn a + b ph√≠a d∆∞·ªõi s·∫Ω kh√¥ng bao gi·ªù ƒë∆∞·ª£c ch·∫°y t·ªõi.
// N·∫øu c·∫ßn xu·ªëng d√≤ng th√¨ b·∫°n ph·∫£i ƒë∆∞a gi√° tr·ªã tr·∫£ v·ªÅ v√†o trong c·∫∑p d·∫•u ngo·∫∑c ƒë∆°n () nh∆∞ sau:
// function sum(a, b) {
//   return a + b;
// }
// const result = sum(1, 2);
// console.log(result); // 3

// S·ª± ph√°t sinh h√†m trong ch∆∞∆°ng tr√¨nh
// Khi l·∫≠p tr√¨nh, th√¥ng th∆∞·ªùng s·∫Ω c√≥ hai tr∆∞·ªùng h·ª£p m√† b·∫°n n√™n vi·∫øt h√†m:
// M·ªôt ƒëo·∫°n ch∆∞∆°ng tr√¨nh ƒë∆∞·ª£c l·∫∑p ƒëi, l·∫∑p l·∫°i nhi·ªÅu l·∫ßn. Vi·ªác gom ch√∫ng l·∫°i th√†nh m·ªôt h√†m s·∫Ω gi√∫p ch∆∞∆°ng tr√¨nh ng·∫Øn g·ªçn h∆°n, d·ªÖ hi·ªÉu h∆°n. V√† khi c·∫ßn thay ƒë·ªïi, b·∫°n ch·ªâ c·∫ßn s·ª≠a m·ªôt l·∫ßn trong n·ªôi dung h√†m, thay v√¨ ph·∫£i s·ª≠a nhi·ªÅu ch·ªó.
// B·∫°n c·∫ßn t√°ch to√†n b·ªô ch∆∞∆°ng tr√¨nh th√†nh nh·ªØng ph·∫ßn nh·ªè h∆°n. Hay c√≤n g·ªçi l√† module ho√°. L√∫c n√†y, b·∫°n c√≥ th·ªÉ x√¢y d·ª±ng logic cho to√†n b·ªô ch∆∞∆°ng tr√¨nh tr∆∞·ªõc khi th·∫≠t s·ª± ƒë·ªãnh nghƒ©a n·ªôi dung t·ª´ng h√†m. C√°ch ti·∫øp c·∫≠n n√†y g·ªçi l√† "top-down".
// V·ªõi nh·ªØng d·ª± √°n l·ªõn, m·ªói th√†nh vi√™n th∆∞·ªùng ch·ªâ ƒë∆∞·ª£c l√†m nh·ªØng module nh·ªè trong to√†n b·ªô m·ªôt project l·ªõn.
// Sau ƒë√≥ khi c√°c module nh·ªè ho√†n th√†nh, s·∫Ω c√≥ ng∆∞·ªùi gh√©p nh·ªØng module nh·ªè ƒë√≥ th√†nh m·ªôt ch∆∞∆°ng tr√¨nh ho√†n ch·ªânh.
// Do ƒë√≥, vi·ªác ph√¢n chia ch∆∞∆°ng tr√¨nh th√†nh nh·ªØng h√†m t·ªët l√† v√¥ c√πng quan tr·ªçng.
// Nh∆∞ th·∫ø n√†o l√† m·ªôt h√†m t·ªët?
// ƒê√¢y l√† m·ªôt c√¢u h·ªèi r·∫•t kh√≥ ƒë·ªÉ tr·∫£ l·ªùi. Theo m√¨nh, h√†m t·ªët l√† h√†m th·ªèa m√£n m·ªôt s·ªë ƒëi·ªÅu ki·ªán sau:
// M·ªôt h√†m ch·ªâ th·ª±c hi·ªán m·ªôt ch·ª©c nƒÉng duy nh·∫•t
// ƒê·ªôc l·∫≠p v·ªõi c√°c y·∫øu t·ªë b√™n ngo√†i (bi·∫øn to√†n c·ª•c, m√¥i tr∆∞·ªùng th·ª±c thi,...)
// D·ªÖ d√†ng t√°i s·ª≠ d·ª•ng
// Tuy nhi√™n, kh√¥ng ph·∫£i l√∫c n√†o b·∫°n c≈©ng c√≥ th·ªÉ tho·∫£ m√£n nh·ªØng y√™u c·∫ßu tr√™n. Ho·∫∑c kh√¥ng nh·∫•t thi·∫øt ph·∫£i tho·∫£ m√£n t·∫•t c·∫£ nh·ªØng y√™u c·∫ßu tr√™n.
// Pure function v√† non-pure function
// Nh√¨n chung, c√≥ hai lo·∫°i h√†m trong JavaScript l√† pure function (h√†m thu·∫ßn khi·∫øt) v√† non-pure function (h√†m kh√¥ng thu·∫ßn khi·∫øt).
// H√†m thu·∫ßn khi·∫øt l√† h√†m kh√¥ng ph·ª• thu·ªôc v√†o y·∫øu t·ªë b√™n ngo√†i (bi·∫øn to√†n c·ª•c, m√¥i tr∆∞·ªùng th·ª±c thi,...). B·∫•t c·ª© khi n√†o b·∫°n g·ªçi h√†m thu·∫ßn khi·∫øt v·ªõi c√πng m·ªôt ƒë·ªëi s·ªë th√¨ k·∫øt qu·∫£ tr·∫£ v·ªÅ lu√¥n gi·ªëng nhau.
// Do ƒë√≥, pure function r·∫•t d·ªÖ ƒë·ªÉ s·ª≠ d·ª•ng, t√°i s·ª≠ d·ª•ng hay b·∫£o tr√¨,... Theo m√¨nh, h√†m thu·∫ßn khi·∫øt l√† m·ªôt h√†m t·ªët.
// V√≠ d·ª• h√†m thu·∫ßn khi·∫øt:
// function pureFunc(number, factor) {
//   return number * factor;
// }
// let ret = pureFunc(2, 10);
// console.log(ret); // 20
// B·∫°n th·∫•y r·∫±ng, v·ªõi c√πng m·ªôt gi√° tr·ªã truy·ªÅn v√†o l√† 2 v√† 10 th√¨ k·∫øt qu·∫£ lu√¥n l√† 20. Do ƒë√≥, h√†m tr√™n l√† h√†m thu·∫ßn khi·∫øt.
// Ng∆∞·ª£c l·∫°i v·ªõi h√†m thu·∫ßn khi·∫øt, h√†m kh√¥ng thu·∫ßn khi·∫øt l√† h√†m ph·ª• thu·ªôc v√†o bi·∫øn to√†n c·ª•c hay m√¥i tr∆∞·ªùng th·ª±c thi.
// V√¨ v·∫≠y, khi b·∫°n g·ªçi c√πng m·ªôt h√†m v·ªõi c√πng m·ªôt ƒë·ªëi s·ªë, nh∆∞ng k·∫øt qu·∫£ l·∫°i c√≥ th·ªÉ kh√°c nhau.
// let factor = 10;
// function nonPureFunc(number) {
//   return number * factor;
// }
// let ret = nonPureFunc(2);
// console.log(ret); // 20
// factor = 11;
// ret = nonPureFunc(2);
// console.log(ret); // => 22
// R√µ r√†ng, h√†m nonPureFunc kh√¥ng ph·∫£i l√† h√†m thu·∫ßn khi·∫øt. V√¨ h√†m n√†y ph·ª• thu·ªôc v√†o bi·∫øn ngo√†i h√†m l√† factor.
// Nghƒ©a l√† khi gi√° tr·ªã c·ªßa bi·∫øn factor thay ƒë·ªïi, k·∫øt qu·∫£ tr·∫£ v·ªÅ c·ªßa h√†m c≈©ng thay ƒë·ªïi (d√π cho c√πng gi√° tr·ªã truy·ªÅn v√†o l√† 2).

// T·ªïng k·∫øt
// V·∫≠y h√†m l√† g√¨?
// H√†m trong JavaScript l√† m·ªôt ch∆∞∆°ng tr√¨nh con gi√∫p th·ª±c thi m·ªôt c√¥ng vi·ªác c·ª• th·ªÉ v·ªõi c√∫ ph√°p l√†:
// function functionName([parameter1], [parameter2],...) {
//       statement1;
//       statement2;
//       ...
//     }
// Trong ƒë√≥:
// Tham s·ªë truy·ªÅn v√†o h√†m ƒë∆∞·ª£c sao ch√©p v√†o bi·∫øn c·ª•c b·ªô b√™n trong h√†m.
// Tr∆∞·ªùng h·ª£p kh√¥ng truy·ªÅn gi√° tr·ªã v√†o th√¨ gi√° tr·ªã c·ªßa tham s·ªë l√† undefined. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng to√°n t·ª≠ = ƒë·ªÉ khai b√°o gi√° tr·ªã m·∫∑c ƒë·ªãnh cho tham s·ªë trong h√†m.
// Bi·∫øn c·ª•c b·ªô khai b√°o b√™n trong h√†m ch·ªâ d√πng ƒë∆∞·ª£c ·ªü th√¢n h√†m. Code b√™n ngo√†i kh√¥ng th·ªÉ truy c·∫≠p v√†o bi·∫øn c·ª•c b·ªô trong h√†m.
// H√†m c√≥ th·ªÉ ƒë·ªçc v√† c·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa bi·∫øn ngo√†i h√†m. Nh∆∞ng khi b√™n trong h√†m c√≥ khai b√°o m·ªôt bi·∫øn c√πng t√™n v·ªõi bi·∫øn ngo√†i h√†m th√¨ bi·∫øn ngo√†i h√†m b·ªã "b·ªè qua".
// H√†m c√≥ th·ªÉ tr·∫£ v·ªÅ gi√° tr·ªã b·∫±ng c√°ch d√πng t·ª´ kh√≥a return. C√≥ th·ªÉ c√≥ nhi·ªÅu t·ª´ kh√≥a return trong th√¢n h√†m. Khi g·∫∑p t·ª´ kh√≥a return, h√†m s·∫Ω d·ª´ng l·∫°i ngay l·∫≠p t·ª©c v√† tr·∫£ v·ªÅ gi√° tr·ªã sau return.
// N·∫øu kh√¥ng c√≥ gi√° tr·ªã, bi·ªÉu th·ª©c,... n√†o sau return, ho·∫∑c kh√¥ng c√≥ t·ª´ kh√≥a return th√¨ gi√° tr·ªã tr·∫£ v·ªÅ c·ªßa h√†m l√† undefined.
// Quy t·∫Øc ƒë·∫∑t t√™n h√†m c≈©ng gi·ªëng quy t·∫Øc ƒë·∫∑t t√™n bi·∫øn v√† h·∫±ng. V√† t√™n h√†m n√™n b·∫Øt ƒë·∫ßu b·∫±ng m·ªôt ƒë·ªông t·ª´.
// N√™n ∆∞u ti√™n vi·∫øt h√†m thu·∫ßn khi·∫øt ƒë·ªÉ d·ªÖ d√†ng t√°i s·ª≠ d·ª•ng, d·ªÖ d√†ng ki·ªÉm th·ª≠ v√† tr√°nh l·ªói.
// Th·ª±c h√†nh
// B√†i 1
// Vi·∫øt h√†m tr·∫£ v·ªÅ gi√° tr·ªã nh·ªè nh·∫•t c·ªßa hai s·ªë (gi·∫£ s·ª≠ gi√° tr·ªã truy·ªÅn n√†o lu√¥n l√† s·ªë).
// Xem ƒë√°p √°n
// function min(a, b) {
//   return a < b ? a : b;
// }
// min(2, 5); // 2
// min(4, -1); // -1
// min(3, 3); // 3
// Tr∆∞·ªùng h·ª£p hai s·ªë truy·ªÅn v√†o b·∫±ng nhau th√¨ dƒ© nhi√™n k·∫øt qu·∫£ l√† gi√° tr·ªã c·ªßa hai s·ªë ƒë√≥.
// B√†i 2
// Vi·∫øt h√†m ki·ªÉm tra xem m·ªôt s·ªë c√≥ ph·∫£i l√† s·ªë nguy√™n t·ªë hay kh√¥ng. N·∫øu l√† s·ªë nguy√™n t·ªë th√¨ tr·∫£ v·ªÅ true. Ng∆∞·ª£c l·∫°i, tr·∫£ v·ªÅ false.
// Xem ƒë√°p √°n
// function isPrime(number) {
//   if (isNaN(number)) return false;
//   if (number < 2) return false;
//   if (number === 2) return true;
//   for (i = 2; i * i <= number; i++) {
//     if (number % i === 0) return false;
//   }
//   return true;
// }
// // V√≠ d·ª•:
// isPrime("abc"); // false
// isPrime(0); // false
// isPrime(2); // true
// isPrime(5); // true
// isPrime(6); // false
// Trong ƒë√≥, h√†m isNaN(number) d√πng ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã c·ªßa bi·∫øn number xem c√≥ ph·∫£i l√† NaN hay kh√¥ng. N√≥i c√°ch kh√°c, n·∫øu isNaN(number) tr·∫£ v·ªÅ false th√¨ gi√° tr·ªã c·ªßa number l√† s·ªë.

// let sayHello = function () {
//   console.log("Hello from kungfutech.edu.vn");
// };
// console.log(sayHello);

// H√†m callback
// V√¨ b·∫£n ch·∫•t h√†m l√† m·ªôt gi√° tr·ªã, n√™n b·∫°n c√≥ th·ªÉ truy·ªÅn h√†m v√†o m·ªôt h√†m kh√°c.
// V√≠ d·ª• m√¨nh c·∫ßn vi·∫øt m·ªôt h√†m ask(question, handleYes, handleNo) v·ªõi ba tham s·ªë:
// question: l√† m·ªôt string, bi·ªÉu th·ªã c√¢u h·ªèi.
// handleYes: l√† h√†m ƒë∆∞·ª£c g·ªçi n·∫øu c√¢u tr·∫£ l·ªùi l√† yes.
// handleNo: l√† h√†m ƒë∆∞·ª£c g·ªçi n·∫øu c√¢u tr·∫£ l·ªùi l√† no.
// Code tri·ªÉn khai h√†m ask nh∆∞ sau:
// function ask(question, handleYes, handleNo) {
//   const answer = confirm(question);
//   if (answer) {
//     handleYes();
//   } else {
//     handleNo();
//   }
// }
// function handleYes() {
//   console.log("B·∫°n ƒë√£ ch·ªçn Yes!");
// }
// function handleNo() {
//   console.log("B·∫°n ƒë√£ ch·ªçn No!");
// }
// ask("B·∫°n mu·ªën ti·∫øp t·ª•c th·ª±c hi·ªán ch∆∞∆°ng tr√¨nh kh√¥ng?", handleYes, handleNo);

// function ask(question, handleYes, handleNo) {
//   const answer = confirm(question);
//   if (answer) {
//     handleYes();
//   } else {
//     handleNo();
//   }
// }
// ask(
//   "B·∫°n mu·ªën ti·∫øp t·ª•c th·ª±c hi·ªán ch∆∞∆°ng tr√¨nh kh√¥ng?",
//   function () {
//     console.log("B·∫°n ƒë√£ ch·ªçn Yes!");
//   },
//   function () {
//     console.log("B·∫°n ƒë√£ ch·ªçn No!");
//   }
// );

// ‚ñ∫ Th·ªùi gian kh·ªüi t·∫°o:
// Function declaration: h√†m ƒë∆∞·ª£c x·ª≠ l√Ω s·ªõm h∆°n v·ªã tr√≠ m√† h√†m ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a. Nghƒ©a l√† b·∫°n c√≥ th·ªÉ g·ªçi h√†m tr∆∞·ªõc khi ƒë·ªãnh nghƒ©a h√†m.
// sayHello(); // Hello!
// function sayHello() {
//   console.log("Hello!");
// }
// Function expression: h√†m ƒë∆∞·ª£c t·∫°o ra t·∫°i th·ªùi ƒëi·ªÉm ch∆∞∆°ng tr√¨nh th·ª±c thi x·ª≠ l√Ω t·ªõi ƒë√≥. Nghƒ©a l√† b·∫°n kh√¥ng th·ªÉ g·ªçi bi·ªÉu th·ª©c h√†m tr∆∞·ªõc khi ƒë·ªãnh nghƒ©a n√≥.
// V√≠ d·ª• sau b·ªã l·ªói c√∫ ph√°p:
// sayHello(); // Uncaught ReferenceError: sayHello is not defined


// ‚ñ∫ Ph·∫°m vi c·ªßa function declaration v√† function expression:
// Khi s·ª≠ d·ª•ng strict mode, function declaration c√≥ ph·∫°m vi trong block. B·∫°n c√≥ th·ªÉ g·ªçi h√†m ·ªü b·∫•t k·ª≥ ƒë√¢u trong block ƒë√≥, nh∆∞ng kh√¥ng s·ª≠ d·ª•ng ƒë∆∞·ª£c ·ªü b√™n ngo√†i.
// V√≠ d·ª• sau b·ªã l·ªói c√∫ ph√°p:
// "use strict";
// let isVietnamese = confirm("B·∫°n c√≥ ph·∫£i ng∆∞·ªùi Vi·ªát Nam kh√¥ng?");
// if (isVietnamese) {
//   function welcome() {
//     console.log("Ch√†o b·∫°n!");
//   }
// } else {
//   function welcome() {
//     console.log("Hello!");
//   }
// }
// welcome(); // Uncaught ReferenceError: welcome is not defined
// B·ªüi v√¨ h√†m welcome ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a b√™n trong block c·ªßa if n√™n ch·ªâ d√πng ƒë∆∞·ª£c b√™n trong block ƒë√≥.
// ƒê·ªÉ s·ª≠ d·ª•ng h√†m welcome b√™n ngo√†i block, b·∫°n c√≥ th·ªÉ d√πng function expression nh∆∞ sau:
// "use strict";
// let isVietnamese = confirm("B·∫°n c√≥ ph·∫£i ng∆∞·ªùi Vi·ªát Nam kh√¥ng?");
// let welcome;
// if (isVietnamese) {
//   welcome = function () {
//     console.log("Ch√†o b·∫°n!");
//   };
// } else {
//   welcome = function () {
//     console.log("Hello!");
//   };
// }
// welcome(); // Kh√¥ng c√≥ l·ªói
// V√≤ng l·∫∑p while
// C√∫ ph√°p c·ªßa v√≤ng l·∫∑p while l√†:
// while (condition) {
//   // code
// }
// Trong ƒë√≥:
// Condition l√† ƒëi·ªÅu ki·ªán th·ª±c hi·ªán v√≤ng l·∫∑p.
// Khi condition c√≥ gi√° tr·ªã truthy th√¨ code ƒë∆∞·ª£c th·ª±c thi. Ng∆∞·ª£c l·∫°i, khi condition l√† falsy th√¨ v√≤ng l·∫∑p k·∫øt th√∫c.
// V√≠ d·ª• v√≤ng l·∫∑p while sau ƒë√¢y in ra c√°c s·ªë t·ª´ 1 ƒë·∫øn 3:
// let count = 1;
// while (count <= 3) {
//   console.log(count);
//   count++;
// }
// // 1
// // 2
// // 3
// ƒêo·∫°n code tr√™n di·ªÖn t·∫£ b·∫±ng l·ªùi nh∆∞ sau:
// Kh·ªüi t·∫°o bi·∫øn count b·∫±ng 1. Ki·ªÉm tra ƒëi·ªÅu ki·ªán n·∫øu count <= 3 ƒë√∫ng th√¨ ghi ra console.log s·ªë count. Sau ƒë√≥, tƒÉng count l√™n 1 ƒë∆°n v·ªã. Ti·∫øp t·ª•c qu√° tr√¨nh ki·ªÉm tra ƒëi·ªÅu ki·ªán, ghi log v√† tƒÉng count cho ƒë·∫øn khi count <= 3 sai th√¨ d·ª´ng l·∫°i.
// Trong ƒëo·∫°n code tr√™n, n·∫øu b·∫°n kh√¥ng c√≥ count++ th√¨ gi√° tr·ªã c·ªßa bi·∫øn count m√£i m√£i l√† 1. N√≥i c√°ch kh√°c, gi√° tr·ªã c·ªßa count <= 3 lu√¥n lu√¥n l√† true. Do ƒë√≥, v√≤ng l·∫∑p s·∫Ω l·∫∑p v√¥ h·∫°n v√† kh√¥ng bao gi·ªù d·ª´ng l·∫°i.
// th√†nh ph·∫ßn condition c√≥ th·ªÉ l√† bi·ªÉu th·ª©c ho·∫∑c bi·∫øn.
// V√≠ d·ª• ƒëo·∫°n code in ra c√°c s·ªë t·ª´ 3 v·ªÅ 1:
// let n = 3;
// // Khi n === 0 th√¨ n l√† falsy, suy ra v√≤ng l·∫∑p k·∫øt th√∫c.
// while (n) {
//   console.log(n);
//   n--; // Gi√° tr·ªã c·ªßa n gi·∫£m ƒëi 1 ƒë∆°n v·ªã sau m·ªói l∆∞·ª£t l·∫∑p
// }
// // 3
// // 2
// // 1
// N·∫øu ƒëo·∫°n code b√™n trong v√≤ng l·∫∑p ch·ªâ l√† m·ªôt c√¢u l·ªánh th√¨ b·∫°n c√≥ th·ªÉ b·ªè qua c·∫∑p d·∫•u {}.
// V√≠ d·ª• v√≤ng l·∫∑p while ch·ªâ c√≥ m·ªôt c√¢u l·ªánh ·ªü th√¢n v√≤ng l·∫∑p:
// let n = 3;
// while (n) console.log(n--);
// // 3
// // 2
// // 1
// V√≤ng l·∫∑p do...while
// V√≤ng l·∫∑p do...while t∆∞∆°ng t·ª± nh∆∞ v√≤ng l·∫∑p while, ch·ªâ kh√°c l√† ƒëi·ªÅu ki·ªán v√≤ng l·∫∑p ƒë∆∞·ª£c chuy·ªÉn xu·ªëng cu·ªëi c·∫•u tr√∫c l·∫∑p.
// C√∫ ph√°p v√≤ng l·∫∑p do...while nh∆∞ sau:
// do {
//   // code
// } while (condition);
// Kh√°c v·ªõi v√≤ng l·∫∑p while, v√≤ng l·∫∑p do...while lu√¥n th·ª±c hi·ªán √≠t nh·∫•t m·ªôt l∆∞·ª£t l·∫∑p. Sau ƒë√≥ m·ªõi ki·ªÉm tra ƒëi·ªÅu ki·ªán l·∫∑p.
// N·∫øu condition c√≥ gi√° tr·ªã truthy th√¨ ti·∫øp t·ª•c c·∫•u tr√∫c l·∫∑p. Ng∆∞·ª£c l·∫°i, khi condition l√† falsy th√¨ v√≤ng l·∫∑p do...while k·∫øt th√∫c.
// V√≠ d·ª• v√≤ng l·∫∑p do...while in ra c√°c s·ªë t·ª´ 1 ƒë·∫øn 3:
// let count = 1;
// do {
//   console.log(count);
//   count++;
// } while (count <= 3);
// // 1
// // 2
// // 3
// V√≤ng l·∫∑p for
// N·∫øu ƒë·ªÉ √Ω c√°c v√≠ d·ª• ·ªü tr√™n th√¨ b·∫°n s·∫Ω th·∫•y r·∫±ng, c·∫•u tr√∫c l·∫∑p v·ªõi c√°c lo·∫°i v√≤ng l·∫∑p nh∆∞ sau:
// Kh·ªüi t·∫°o gi√° tr·ªã bi·∫øn ƒë·∫øm (count = 1).
// So s√°nh gi√° tr·ªã ƒë·∫øm v·ªõi gi√° tr·ªã t·ªëi ƒëa (count <= 3).
// TƒÉng gi√° tr·ªã ƒë·∫øm (count++).
// ƒê·ªÉ ng·∫Øn g·ªçn, JavaScript sinh ra v√≤ng l·∫∑p for v·ªõi c√∫ ph√°p l√†:
// for([kh·ªüi t·∫°o]; [ƒëi·ªÅu ki·ªán]; [c·∫≠p nh·∫≠t]){
//       // code
//     }
// Trong ƒë√≥:
// [Kh·ªüi t·∫°o]: Th·ª±c hi·ªán m·ªôt l·∫ßn l√∫c b·∫Øt ƒë·∫ßu v√≤ng l·∫∑p.
// [ƒêi·ªÅu ki·ªán]: Ki·ªÉm tra tr∆∞·ªõc m·ªói v√≤ng l·∫∑p.
// [C·∫≠p nh·∫≠t]: Th·ª±c hi·ªán ·ªü cu·ªëi m·ªói v√≤ng l·∫∑p.
// V√≠ d·ª• v√≤ng l·∫∑p for d√πng ƒë·ªÉ in ra c√°c s·ªë t·ª´ 1 ƒë·∫øn 3:
// for (let count = 1; count <= 3; count++) {
//   console.log(count);
// }
// // 1
// // 2
// // 3
// B·∫°n c√≥ th·ªÉ th·∫•y l√† c·∫•u tr√∫c l·∫∑p v·∫´n ƒë∆∞·ª£c duy tr√¨ m√† nh√¨n code g·ªçn g√†ng h∆°n nhi·ªÅu.
// Bi·∫øn count ƒë∆∞·ª£c khai b√°o b√™n trong v√≤ng l·∫∑p for nh∆∞ tr√™n th√¨ ph·∫°m vi c·ªßa bi·∫øn ch·ªâ l√† b√™n trong v√≤ng l·∫∑p for. Do ƒë√≥, b·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng bi·∫øn count tr√™n ·ªü b√™n ngo√†i v√≤ng l·∫∑p for.
// V√≠ d·ª• sau b·ªã l·ªói Uncaught ReferenceError: count is not defined khi c·ªë g·∫Øng truy c·∫≠p v√†o bi·∫øn count:
// for (let count = 1; count <= 3; count++) {
//   console.log(count);
// }
// console.log(count); // Uncaught ReferenceError: count is not defined
// ƒê·ªÉ s·ª≠ d·ª•ng ƒë∆∞·ª£c bi·∫øn count, b·∫°n c·∫ßn khai b√°o bi·∫øn count ·ªü ngo√†i v√≤ng l·∫∑p for:
// let count;
// for (count = 1; count <= 3; count++) {
//   console.log(count);
// }
// console.log(count); // 4
// Ch√∫ √Ω: b·∫•t k·ªÉ ph·∫ßn n√†o trong v√≤ng l·∫∑p for ƒë·ªÅu kh√¥ng b·∫Øt bu·ªôc.
// V√≠ d·ª• b·ªè qua ph·∫ßn kh·ªüi t·∫°o:
// let count = 1;
// for (; count <= 3; count++) {
//   console.log(count);
// }
// // 1
// // 2
// // 3
// V√≠ d·ª• b·ªè qua ph·∫ßn c·∫≠p nh·∫≠t:
// let count = 1;
// for (; count <= 3; ) {
//   console.log(count++);
// }
// // 1
// // 2
// // 3
// V√≠ d·ª• b·ªè qua ph·∫ßn ƒëi·ªÅu ki·ªán (tr∆∞·ªùng h·ª£p n√†y s·∫Ω l·∫∑p v√¥ h·∫°n):
// let count = 1;
// for (;;) {
//   console.log(count++);
// }


// let done = false;
// for (let i = 0; i < 3; i++) {
//   if (done) {
//     break;
//   }
//   for (let j = 0; j < 3; j++) {
//     if (i * j >= 4) {
//       done = true;
//       break;
//     }
//     console.log(i, j);
//   }
// }

// let size; // Nh·∫≠p s·ªë d∆∞∆°ngwhile (true) {  size = Number(prompt("Enter a positive number:"));  if (!isNaN(size) && size > 0) break;}
// // In ra m√†n h√¨nh
// for (let row = 0; row < size; row++) {
//   let str = "";
//   for (let col = 0; col < size; col++) {
//     if (row % 2 === col % 2) {
//       str += "#";
//     } else {
//       str += "_";
//     }
//   }
//   console.log(str);
// }
// let myComputer = {
//   type: "laptop",
//   brand: "Sony",
//   os: "Windows 7",
//   graphicCard: "NVIDIA",
// };
// console.log(myComputer);
// ƒê·ªÉ thay ƒë·ªïi gi√° tr·ªã thu·ªôc t√≠nh c·ªßa object, b·∫°n ch·ªâ c·∫ßn s·ª≠ d·ª•ng c√°ch truy c·∫≠p ·ªü tr√™n v√† g√°n gi√° tr·ªã m·ªõi cho thu·ªôc t√≠nh ƒë√≥.
// let myComputer = {
//   type: "laptop",
//   brand: "Sony",
//   "operating system": "Windows 7",
//   "graphic card": "NVIDIA",
// };
// myComputer.type = "desktop";
// myComputer["operating system"] = "Ubuntu";
// console.log(myComputer.type); // => desktop
// console.log(myComputer["operating system"]); // => Ubuntu
// B·∫°n c≈©ng c√≥ th·ªÉ th√™m thu·ªôc t√≠nh cho object nh∆∞ sau:
// let myComputer = {
//   type: "laptop",
//   brand: "Sony",
//   "operating system": "Windows 7",
//   "graphic card": "NVIDIA",
// };
// myComputer.status = "sleep";
// myComputer["it is good"] = true;
// console.log(myComputer.status); // sleep
// console.log(myComputer["it is good"]); // => true

// ƒê·ªÉ x√≥a m·ªôt thu·ªôc t√≠nh c·ªßa object trong JavaScript, b·∫°n s·ª≠ d·ª•ng to√°n t·ª≠ delete:
// let myComputer = {
//   type: "laptop",
//   brand: "Sony",
//   "operating system": "Windows 7",
//   "graphic card": "NVIDIA",
// };
// delete myComputer.brand;
// delete myComputer["graphic card"];
// console.log(myComputer.brand); // undefined
// console.log(myComputer["graphic card"]); // undefine

// let myComputer = {
//   type: "laptop",
//   brand: "Sony",
//   os: "Windows 7",
//   graphicCard: "NVIDIA"
// };
// let myComputer = {
//   type: "laptop",
//   brand: "Sony",
//   os: "Windows 7",
//   graphicCard: "NVIDIA",
// };
// console.log(myComputer);
// console.log(myComputer.type);
// console.log(myComputer["brand"]);

// let myComputer = {
//   _type: "laptop",
//   $brand: "Sony",
//   "operating system": "Windows 7",
//   "graphic card": "NVIDIA",
// };
// console.log(myComputer.$brand);
// console.log(myComputer._type);
// console.log(myComputer["operating system"]);
// // console.log(myComouter.operating system);   ERROR -> l·ªói c√∫ ph√°p

// myComputer._type = "desktop";
// myComputer["operating system"] = "Ubuntu";

// console.log(myComputer._type);
// console.log(myComputer["operating system"]);

// myComputer.status = "sleep";
// myComputer["it is good"] = true;
// console.log(myComputer.status);
// console.log(myComputer["it is good"]);
// console.log(myComputer);
// delete myComputer.$brand;
// delete myComputer["graphic card"];
// console.log(myComputer.$brand);
// console.log(myComputer["graphic card"]);

// let operatingSystem = "operating system";
// console.log(myComputer[operatingSystem]);

// let t = "type";
// const operatingSystem = "operating system";

// let myComputer = {
//   [t]: "laptop",
//   brand: "Sony",
//   [operatingSystem]: "Windows 7",
//   ["graphic" + " " + "card"]: "NVIDIA",
// };

// console.log(myComputer.type);
// console.log(myComputer["operating system"]);
// console.log(myComputer["graphic card"]);

// function makeComputer(type, brand, os, graphicCard){
//   return {
//     type,
//     brand,
//     os,
//     graphicCard,
//   };
// }
// let myComputer = makeComputer("laptop", "Sony", "Windows 7", "NVIDIA");
// console.log(myComputer.type);
// console.log(myComputer.brand);
// console.log(myComputer.os);
// console.log(myComputer.graphicCard);

// Gi·ªõi h·∫°n v·ªÅ t√™n thu·ªôc t√≠nh c·ªßa object trong JS
// Nh∆∞ b·∫°n ƒë√£ bi·∫øt, b·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng t·ª´ kh√≥a v√† t·ª´ d·ªØ tr·ªØ ƒë·ªÉ ƒë·∫∑t t√™n bi·∫øn trong JavaScript, v√≠ d·ª• nh∆∞: var, const, let, for, while,...
// Nh∆∞ng v·ªõi thu·ªôc t√≠nh trong object kh√°c, b·∫°n kh√¥ng b·ªã gi·ªõi h·∫°n n√†y:

// let obj = {
//   var: 1,
//   let: "a",
//   for: null,
//   while: NaN,
//   0: "zero",
// };
// console.log(obj.var);
// console.log(obj.let);
// console.log(obj.for);
// console.log(obj.while);
// console.log(obj[0]);
// console.log(obj["0"]);
// C·∫£ hai tr∆∞·ªùng h·ª£p tr√™n ƒë·ªÅu cho k·∫øt qu·∫£ l√† undefined. Nh∆∞ng r√µ r√†ng l√† thu·ªôc t√≠nh name c√≥ t·ªìn t·∫°i trong object, c√≤n thu·ªôc t√≠nh age th√¨ kh√¥ng t·ªìn t·∫°i.
// ƒê·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y, b·∫°n c√≥ th·ªÉ d√πng to√°n t·ª≠ in v·ªõi c√∫ ph√°p l√†:
// "key" in object;
// V√≠ d·ª• s·ª≠ d·ª•ng in:

// let user = {
//   name: undefined,
// };
// console.log("name" in user);
// console.log("age" in user);

// let myComputer = {
//   type: "laptop",
//   brand: "Sony",
//   "operating system": "Windows 7",
//   "graphic card": "NVIDIA",
// };
// for (let prop in myComputer){
//   console.log(prop, ":", myComputer[prop]);
// }

// let numbers = {
//   "-21": "minus two",
//   "-1": "minus one",
//   0: "zero",
//   10: "ten",
//   2: "two",
//   a: "abc",
//   "-3": "minus three",
//   4: "four",
//   3: "three",
//   6: "six",
// };
// for (let n in numbers) {
//   console.log(n);
// }
// // 0
// // 2
// // 3
// // 4
// // 6
// // 10
// // -21
// // -1
// // a
// // -3
// Trong v√≠ d·ª• tr√™n, c√°c thu·ªôc t√≠nh v·ªõi s·ªë kh√¥ng d·∫•u ƒë∆∞·ª£c ƒë∆∞a l√™n ƒë·∫ßu v√† s·∫Øp x·∫øp theo t·ª© t·ª± t·ª´ s·ªë nh·ªè ƒë·∫øn s·ªë l·ªõn. C√°c thu·ªôc t√≠nh c√≤n l·∫°i ƒë∆∞·ª£c x·∫øp sau v√† gi·ªëng v·ªõi th·ª© t·ª± th√™m v√†o object.

// let point = {};
// point.x = 2 ;
// point.y = 3;
// point["z-index"] = 1000;
// let sum = 0;
// for (let key in point){
//   sum += point[key];
// }
// console.log(sum);

// point.x = 1;
// delete point.y;
// console.log(point);

// Copy object s·ª≠ d·ª•ng v√≤ng l·∫∑p for...in
// C√°ch ƒë∆°n gi·∫£n nh·∫•t ƒë·ªÉ copy object trong JavaScript l√† s·ª≠ d·ª•ng v√≤ng l·∫∑p for...in ƒë·ªÉ duy·ªát t·∫•t c·∫£ c√°c thu·ªôc t√≠nh c·ªßa object. R·ªìi l·∫•y gi√° tr·ªã ·ª©ng v·ªõi t·ª´ng thu·ªôc t√≠nh ƒë·ªÉ g√°n cho object m·ªõi.
// V√≠ d·ª• copy object b·∫±ng for...in:
// let p1 = { x: 1, y: 2 };
// let p2 = {};
// for (let key in p1) {
//   p2[key] = p1[key];
// }
// console.log(p2.x); // 1
// console.log(p2.y); // 2
// p2.x = 5;
// console.log(p2.x); // 5
// console.log(p1.x); // 1
// B·∫°n th·∫•y r·∫±ng, gi√° tr·ªã c√°c thu·ªôc t√≠nh x v√† y c·ªßa p2 ho√†n to√†n gi·ªëng p1. Nh∆∞ng khi thay ƒë·ªïi gi√° tr·ªã p2.x = 5 th√¨ gi√° tr·ªã p1.x v·∫´n kh√¥ng thay ƒë·ªïi.
// Ngo√†i c√°ch s·ª≠ d·ª•ng v√≤ng l·∫∑p for...in nh∆∞ tr√™n, b·∫°n c√≥ th·ªÉ d√πng h√†m t∆∞∆°ng t·ª± l√† Object.assign() v·ªõi c√∫ ph√°p:
// Object.assign(dest, [src1, src2, src3...]);
// Trong ƒë√≥:
// dest: l√† object ƒë√≠ch.
// [src1, src2, src3...]: l√† c√°c object ngu·ªìn.
// Ph∆∞∆°ng th·ª©c tr√™n s·∫Ω copy to√†n b·ªô c√°c thu·ªôc t√≠nh c·ªßa c√°c object ngu·ªìn src1, src2,...,srcN v√†o object ƒë√≠ch dest. V√† gi√° tr·ªã tr·∫£ v·ªÅ ch√≠nh l√† object ƒë√≠ch dest.
// V√≠ d·ª• s·ª≠ d·ª•ng Object.assign:
// let user = { name: "Alex" };
// let permission1 = { canView: true };
// let permission2 = { canEdit: false };
// // copy to√†n b·ªô thu·ªôc t√≠nh t·ª´ permission1 v√† permission2 v√†o user
// Object.assign(user, permission1, permission2);
// // user tr·ªü th√†nh { name: "Alex", canView: true, canEdit: false }
// for (let key in user) {
//   console.log(key, ":", user[key]);
// }
// // name : Alex
// // canView: true
// // canEdit: false


// N·∫øu t√™n thu·ªôc t√≠nh gi·ªëng nhau th√¨ k·∫øt qu·∫£ l√† gi√° tr·ªã c·ªßa object cu·ªëi c√πng:
// let user = { name: "Alex" };
// let permission1 = { canView: true };
// let permission2 = { canView: false, canEdit: false };
// // copy to√†n b·ªô thu·ªôc t√≠nh t·ª´ permission1 v√† permission2 v√†o user
// Object.assign(user, permission1, permission2);
// // user tr·ªü th√†nh { name: "Alex", canView: false, canEdit: false }
// for (let key in user) {
//   console.log(key, ":", user[key]);
// }
// // name : Alex
// // canView: false
// // canEdit: false

// Ph∆∞∆°ng th·ª©c c·ªßa Object
// Trong JavaScript, h√†nh ƒë·ªông c·ªßa object ƒë∆∞·ª£c bi·ªÉu di·ªÖn b·ªüi h√†m. V√≠ d·ª• ƒë·ªëi t∆∞·ª£ng user v·ªõi h√†nh ƒë·ªông sayHello() nh∆∞ sau:
// let user = {
//   name: "Alex",
//   age: "28",
// };
// user.sayHello = function () {
//   console.log("Hello!");
// };
// user.sayHello(); // Hello!
// Trong v√≠ d·ª• tr√™n, m√¨nh s·ª≠ d·ª•ng function expression ƒë·ªÉ t·∫°o m·ªôt h√†m, r·ªìi g√°n h√†m ƒë√≥ cho thu·ªôc t√≠nh sayHello c·ªßa user.
// Ti·∫øp theo, m√¨nh g·ªçi user.sayHello(). V√† k·∫øt qu·∫£ l√† Hello! ƒë∆∞·ª£c hi·ªÉn th·ªã ra console.
// üìù M·ªôt h√†m l√† thu·ªôc t√≠nh c·ªßa object th√¨ n√≥ ƒë∆∞·ª£c g·ªçi l√† ph∆∞∆°ng th·ª©c.
// V√¨ v·∫≠y, sayHello ch√≠nh l√† m·ªôt ph∆∞∆°ng th·ª©c c·ªßa object user.
// Ngo√†i c√°ch s·ª≠ d·ª•ng function expression nh∆∞ tr√™n, b·∫°n c√≥ th·ªÉ d√πng function declaration ƒë·ªÉ khai b√°o h√†m nh∆∞ sau:
// let user = {
//   name: "Alex",
//   age: "28",
// };
// function sayHello() {
//   console.log("Hello!");
// }
// user.sayHello = sayHello;
// user.sayHello(); // Hello!
// üí° C√°ch s·ª≠ d·ª•ng object ƒë·ªÉ bi·ªÉu di·ªÖn ƒë·ªëi t∆∞·ª£ng v·ªõi c√°c thu·ªôc t√≠nh v√† h√†nh ƒë·ªông nh∆∞ tr√™n g·ªçi l√† l·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng hay OOP.

// C√∫ ph√°p ng·∫Øn g·ªçn khai b√°o ph∆∞∆°ng th·ª©c
// Trong c√°c v√≠ d·ª• tr√™n, m√¨nh kh·ªüi t·∫°o object xong r·ªìi m·ªõi ƒë·ªãnh nghƒ©a th√™m ph∆∞∆°ng th·ª©c. B·∫°n c≈©ng c√≥ th·ªÉ ƒë·ªãnh nghƒ©a ph∆∞∆°ng th·ª©c t·ª´ khi kh·ªüi t·∫°o object.
// V√≠ d·ª• kh·ªüi t·∫°o object v·ªõi ph∆∞∆°ng th·ª©c:
// let user = {
//   name: "Alex",
//   age: "28",
//   sayHello: function () {
//     console.log("Hello!");
//   },
// };
// user.sayHello(); // Hello!
// Ngo√†i ra, b·∫°n c≈©ng c√≥ th·ªÉ b·ªè qua t·ª´ kh√≥a function nh∆∞ sau:
// let user = {
//   name: "Alex",
//   age: "28",
//   sayHello() {
//     console.log("Hello!");
//   },
// };
// user.sayHello(); // Hello!
// Tr√™n ƒë√¢y l√† m·ªôt s·ªë ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ ph∆∞∆°ng th·ª©c c·ªßa object. Sau ƒë√¢y, m√¨nh ti·∫øp t·ª•c t√¨m hi·ªÉu v·ªÅ t·ª´ kh√≥a this trong JavaScript.

// let user = {
//   name: "Alex",
//   age: "28",
//   sayHello() {
//     console.log("Hello");
//   },
// };
// user.sayHello();

// T·ª´ kh√≥a this trong JavaScript
// M·ªôt tr∆∞·ªùng h·ª£p kh√° ph·ªï bi·∫øn ƒë·ªëi v·ªõi object l√† vi·ªác truy c·∫≠p v√†o thu·ªôc t√≠nh c·ªßa object ngay b√™n trong ph∆∞∆°ng th·ª©c.
// V√≠ d·ª• ph∆∞∆°ng th·ª©c sayHello tr√™n mu·ªën truy c·∫≠p v√† hi·ªÉn th·ªã gi√° tr·ªã c·ªßa thu·ªôc t√≠nh name. ƒê·ªÉ l√†m ƒë∆∞·ª£c ƒëi·ªÅu n√†y, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng t·ª´ kh√≥a this.
// Gi√° tr·ªã c·ªßa this trong JavaScript ch√≠nh l√† object g·ªçi ph∆∞∆°ng th·ª©c - ƒë·ªëi t∆∞·ª£ng tr∆∞·ªõc d·∫•u ch·∫•m (.), v√≠ d·ª•:
// let user = {
//   name: "Alex",
//   age: "28",
//   sayHello(){
//     console.log(this.name + " says Hello!");
//   },
// };
// user.sayHello();

// K·∫øt qu·∫£ v·∫´n ƒë√∫ng. Nh∆∞ng li·ªáu v·∫•n ƒë·ªÅ g√¨ c√≥ th·ªÉ x·∫£y ra?
// Gi·∫£ s·ª≠, b·∫°n mu·ªën copy object d·∫°ng tham chi·∫øu t·ª´ user sang admin r·ªìi ghi ƒë√® gi√° tr·ªã c·ªßa user:
// let user = {
//   name: "Alex",
//   age: "28",
//   sayHello() {
//     console.log(this.name + " says Hello!");
//   },
// };
// let admin = user;
// user = null;
// admin.sayHello(); // Uncaught TypeError: Cannot read properties of null (reading 'name')
// C√¢u l·ªánh cu·ªëi c√πng b·ªã l·ªói.
// V√¨ khi b·∫°n g·ªçi admin.sayHello(), b√™n trong ph∆∞∆°ng th·ª©c sayHello ƒëang g·ªçi user.name. M√† gi√° tr·ªã user ƒë√£ b·ªã g√°n b·∫±ng null.
// K·∫øt qu·∫£, b·∫°n b·ªã l·ªói Uncaught TypeError: Cannot read properties of null (reading 'name').
// N·∫øu b·∫°n d√πng this.name th√¨ s·∫Ω kh√¥ng b·ªã l·ªói tr√™n. V√¨ this l√∫c n√†y ƒë∆∞·ª£c hi·ªÉu l√† admin.

// function sayHello() {
//   console.log(this.name);
// }

// This trong JavaScript kh√¥ng ƒë∆∞·ª£c "bind"
// Kh√°c v·ªõi c√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh kh√°c, t·ª´ kh√≥a this c√≥ th·ªÉ d√πng ·ªü b·∫•t k·ª≥ h√†m n√†o (kh√¥ng ch·ªâ l√† ph∆∞∆°ng th·ª©c c·ªßa object),.
// V√≠ d·ª• sau ƒë√¢y kh√¥ng b·ªã l·ªói c√∫ ph√°p:
// function sayHello() {
//   console.log(this.name);
// }
// Gi√° tr·ªã c·ªßa this ƒë∆∞·ª£c x√°c ƒë·ªãnh trong th·ªùi gian ch·∫°y, ph·ª• thu·ªôc v√†o ƒë·ªëi t∆∞·ª£ng g·ªçi h√†m, v√≠ d·ª•:
// let user1 = { name: "Alex" };
// let user2 = { name: "John" };
// function sayHello() {
//   console.log(this.name);
// }
// S·ª≠ d·ª•ng c√πng 1 h√†m cho 2 objects
// user1.sayHi = sayHello;
// user2.sayHi = sayHello;
// user1.sayHi(); // Alex (this t∆∞∆°ng ·ª©ng v·ªõi user1)
// user2.sayHi(); // John (this t∆∞∆°ng ·ª©ng v·ªõi user2)
// B·∫°n th·∫•y r·∫±ng, t√πy thu·ªôc v√†o ƒë·ªëi t∆∞·ª£ng g·ªçi h√†m l√† user1 hay user2 m√† gi√° tr·ªã c·ªßa this ƒë∆∞·ª£c x√°c ƒë·ªãnh t∆∞∆°ng ·ª©ng.

// ƒêi·ªÅu n√†y gi·∫£i th√≠ch l√Ω do t·∫°i sao this trong JavaScript kh√¥ng ƒë∆∞·ª£c "bind".
// N·∫øu h√†m sayHello tr√™n ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp kh√¥ng qua object n√†o th√¨ sao?

// V√≠ d·ª• g·ªçi tr·ª±c ti·∫øp sayHello():
// "use strict";
// function sayHello() {
//   console.log(this);
// }
// sayHello(); // undefined
// Trong tr∆∞·ªùng h·ª£p n√†y, gi√° tr·ªã c·ªßa this l√† undefined ·ªü strict mode. N·∫øu b·∫°n truy c·∫≠p this.name th√¨ s·∫Ω b·ªã l·ªói Uncaught TypeError: Cannot read properties of undefined (reading 'name').
// "use strict";
// function sayHello() {
//   console.log(this.name);
// }
// sayHello();
// // Uncaught TypeError: Cannot read properties of undefined (reading 'name')
// N·∫øu kh√¥ng s·ª≠ d·ª•ng strict mode th√¨ gi√° tr·ªã c·ªßa this s·∫Ω l√† ƒë·ªëi t∆∞·ª£ng global (ƒë·ªëi t∆∞·ª£ng window tr√™n tr√¨nh duy·ªát).
// Khi ƒë√≥, this.name t∆∞∆°ng ƒë∆∞∆°ng v·ªõi window.name (th∆∞·ªùng l√† undefined).

// let calculator = {
//   read() {
//     this.a = +prompt("Nhap vao so a:", 0);
//     this.b = +prompt("Nhap vao gia tri b:", 0);

//   },
//   add(){
//     return  this.a + this.b;
//   },
//   mul(){
//     return this.a * this.b;
//   },
// };
// calculator.read();
// console.log(calculator.add());
// console.log(calculator.mul());

// let calculator = {
//   // Ph∆∞∆°ng th·ª©c read()
//   read() {
//     this.a = +prompt("Nh·∫≠p v√†o s·ªë a:", 0);
//     this.b = +prompt("Nh·∫≠p v√†o s·ªë b:", 0);
//   },
//   // Ph∆∞∆°ng th·ª©c add()
//   add() {
//     return this.a + this.b;
//   },
//   // Ph∆∞∆°ng th·ª©c mul()
//   mul() {
//     return this.a * this.b;
//   },
// };
// calculator.read();
// console.log(calculator.add());
// console.log(calculator.mul());

// B√†i 3
// Cho ƒëo·∫°n code sau:
// // Kh·ªüi t·∫°o obj
// let obj = {
//   count: 0,
//   increase() {
//     this.count++;
//   },
//   decrease() {
//     this.count--;
//   },
//   showCount() {
//     console.log(this.count);
//   },
// };
// // S·ª≠ d·ª•ng obj
// obj.increase();
// obj.increase();
// obj.decrease();
// obj.showCount(); // 1
// H√£y s·ª≠a l·∫°i c√°c ph∆∞∆°ng th·ª©c c·ªßa obj ƒë·ªÉ c√≥ th·ªÉ g·ªçi code theo ki·ªÉu:
// obj.increase().increase().decrease().showCount(); // 1
// Xem ƒë√°p √°n
// Kƒ© thu·∫≠t n√†y g·ªçi l√† Method chaining.
// √ù t∆∞·ªüng l√†: trong m·ªói ph∆∞∆°ng th·ª©c, b·∫°n s·∫Ω return v·ªÅ this (ƒë·ªëi t∆∞·ª£ng hi·ªán t·∫°i).
// // Kh·ªüi t·∫°o obj
// let obj = {
//   count: 0,
//   increase() {
//     this.count++;
//     return this;
//   },
//   decrease() {
//     this.count--;
//     return this;
//   },
//   showCount() {
//     console.log(this.count);
//     return this;
//   },
// };
// // S·ª≠ d·ª•ng obj
// obj.increase().increase().decrease().showCount(); // 1
// B·∫°n c√≥ th·ªÉ khai b√°o, ƒë·ªìng th·ªùi kh·ªüi t·∫°o object ngay v·ªõi c√∫ ph√°p new function(){...} nh∆∞ sau:
// let root = new (function () {
//   this.x = 1;
//   this.y = 2;
//   /*
//    * Code x·ª≠ l√Ω kh√°c t·∫°i ƒë√¢y
//    */
// })();
// console.log(root.x, root.y); // 1 2

// Tr·∫£ v·ªÅ gi√° tr·ªã t·ª´ h√†m kh·ªüi t·∫°o
// Th√¥ng th∆∞·ªùng, h√†m kh·ªüi t·∫°o kh√¥ng c√≥ t·ª´ kh√≥a return v√¨ JavaScript Engine ng·∫ßm ƒë·ªãnh s·∫Ω tr·∫£ v·ªÅ this. Tuy nhi√™n, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng return trong h√†m kh·ªüi t·∫°o v·ªõi quy t·∫Øc nh∆∞ sau:
// N·∫øu return ƒë∆∞·ª£c g·ªçi v·ªõi object th√¨ gi√° tr·ªã tr·∫£ v·ªÅ c·ªßa h√†m kh·ªüi t·∫°o l√† object ch·ª© kh√¥ng ph·∫£i this.
// N·∫øu return ƒë∆∞·ª£c g·ªçi v·ªõi gi√° tr·ªã nguy√™n th·ªßy, return s·∫Ω b·ªã b·ªè qua.
// N√≥i c√°ch kh√°c, return v·ªõi m·ªôt object s·∫Ω tr·∫£ v·ªÅ object ƒë√≥, ng∆∞·ª£c l·∫°i th√¨ tr·∫£ v·ªÅ this.
// V√≠ d·ª• h√†m kh·ªüi t·∫°o tr·∫£ v·ªÅ m·ªôt object kh√°c this:
// function Point(x, y) {
//   this.x = x;
//   this.y = y;
//   return { x: 100, y: 100 }; // tr·∫£ v·ªÅ object n√†y thay v√¨ this}
// }
// let p = new Point(0, 0);
// console.log(p.x, p.y); // 100 100
// V√≠ d·ª• h√†m kh·ªüi t·∫°o tr·∫£ v·ªÅ gi√° tr·ªã nguy√™n th·ªßy:
// function Point(x, y) {
//   this.x = x;
//   this.y = y;
//   return 1; // return tr·∫£ v·ªÅ gi√° tr·ªã nguy√™n th·ªßy b·ªã b·ªè qua}
// }
// let p = new Point(0, 0);
// console.log(p.x, p.y); 

// let myArray = [
//   'Javascript',
//   'PHP',
//   'Java',
//   'Dart',
//   'Ruby',
//   'Python'
// ];

// let arrayLength = myArray.length;

// for (let i = 0; i< arrayLength; i++){
//   console.log(myArray[i]);
// }
// let myInfo = {
//   name: 'trung kien',
//   age: 25,
//   address: 'Ha Noi, VN'
// };
// for (let key in myInfo){
//   // console.log(key);
//   console.log(myInfo[key]);

// }
 
// let language = [
//   'javascript',
//   'PHP',
//   'Java'
// ];
// for (let key in language){
//   // console.log(key);
//   console.log(language[key]);
// }
// let myString = 'javascript';
// console.log(myString[2]); 
// let language = 'javascript';
// for(let key in language){
//   console.log(language[key]); 
// }

// for (var i =0; i < 10; i++){
//   if (i%2 !==0){
//     continue;
//   }
//   console.log(i);
// }

// let myArray = [
//   [1, 2],
//   [3, 4],
//   [5, 6]
// ];
//  for (let i = 0; i < myArray.length; i++) { 
//       for (let j = 0;j < myArray[i].length; j++){
//   console.log(myArray[i][j]); 
//   }
//  }
// let courses = [
//   {
//     id: 1,
//     name: 'Javascript',
//     coin: 250
//   },
//   {
//     id: 2,
//     name: 'HTML CSS',
//     coin: 250
//   },
//   {
//     id: 3,
//     name: 'Ruby',
//     coin: 250
//   },
//   {
//     id: 4,
//     name: 'PHP',
//     coin: 0
//   },
//   {
//     id: 5,
//     name: 'ReactJS',
//     coin: 0
//   }
// ];

// let depthArray = [1, 2, [3, 9], 7, 6, [7, 8, 4]];

// let flatArray = depthArray.reduce(function(flatOutput, depthItem){
//   return flatOutput.concat(depthItem);
// }, []);
// console.log(flatArray);
// Trong JavaScript, concat l√† m·ªôt ph∆∞∆°ng th·ª©c ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ n·ªëi (g·ªôp) hai ho·∫∑c nhi·ªÅu m·∫£ng l·∫°i v·ªõi nhau v√† t·∫°o ra m·ªôt m·∫£ng m·ªõi. Ph∆∞∆°ng th·ª©c n√†y kh√¥ng thay ƒë·ªïi m·∫£ng g·ªëc, m√† tr·∫£ v·ªÅ m·ªôt m·∫£ng m·ªõi ch·ª©a t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ t·ª´ c√°c m·∫£ng ƒë∆∞·ª£c n·ªëi.

// C√∫ ph√°p c·ªßa ph∆∞∆°ng th·ª©c concat nh∆∞ sau:

// javascript
// Copy code
// let newArray = array1.concat(array2, array3, ..., arrayN);
// array1: M·∫£ng ƒë·∫ßu ti√™n.
// array2, array3, ..., arrayN: C√°c m·∫£ng c√≤n l·∫°i b·∫°n mu·ªën n·ªëi v√†o m·∫£ng ƒë·∫ßu ti√™n.
// D∆∞·ªõi ƒë√¢y l√† m·ªôt v√≠ d·ª• ƒë∆°n gi·∫£n:

// javascript
// Copy code
// let array1 = [1, 2, 3];
// let array2 = [4, 5, 6];
// let array3 = [7, 8, 9];

// let resultArray = array1.concat(array2, array3);

// console.log(resultArray);
// // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]
// ·ªû ƒë√¢y, resultArray s·∫Ω ch·ª©a t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ t·ª´ array1, array2, v√† array3. Ph∆∞∆°ng th·ª©c concat c√≥ th·ªÉ nh·∫≠n nhi·ªÅu ƒë·ªëi s·ªë, kh√¥ng ch·ªâ gi·ªõi h·∫°n ·ªü hai m·∫£ng.

// let numbers = [250, 250, 250, 0, 0];

// let totalCoin = numbers.reduce(function(total, number){
//   return total + number;
// });
// console.log(totalCoin);


// let totalCoin = courses.reduce(function(total,course){
//   return total + course.coin;
// },0);
// console.log(totalCoin);

// ƒêo·∫°n m√£ JavaScript tr√™n th·ª±c hi·ªán vi·ªác t√≠nh t·ªïng s·ªë coin c·ªßa t·∫•t c·∫£ c√°c kh√≥a h·ªçc trong m·∫£ng courses b·∫±ng c√°ch s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c reduce. D∆∞·ªõi ƒë√¢y l√† ph√¢n t√≠ch chi ti·∫øt:

// M·∫£ng courses: L√† m·ªôt m·∫£ng ch·ª©a c√°c ƒë·ªëi t∆∞·ª£ng ƒë·∫°i di·ªán cho c√°c kh√≥a h·ªçc. M·ªói ƒë·ªëi t∆∞·ª£ng c√≥ c√°c thu·ªôc t√≠nh nh∆∞ id, name, v√† coin (s·ªë coin).

// javascript
// Copy code
// let courses = [
//   { id: 1, name: 'Javascript', coin: 250 },
//   { id: 2, name: 'HTML CSS', coin: 250 },
//   { id: 3, name: 'Ruby', coin: 250 },
//   { id: 4, name: 'PHP', coin: 0 },
//   { id: 5, name: 'ReactJS', coin: 0 }
// ];
// Ph∆∞∆°ng th·ª©c reduce: ƒê∆∞·ª£c g·ªçi tr√™n m·∫£ng courses ƒë·ªÉ th·ª±c hi·ªán vi·ªác gi·∫£m m·∫£ng th√†nh m·ªôt gi√° tr·ªã duy nh·∫•t (trong tr∆∞·ªùng h·ª£p n√†y l√† t·ªïng s·ªë coin). Ph∆∞∆°ng th·ª©c reduce nh·∫≠n v√†o m·ªôt h√†m callback v√† m·ªôt gi√° tr·ªã kh·ªüi ƒë·∫ßu cho bi·∫øn t√≠ch tr·ªØ (trong tr∆∞·ªùng h·ª£p n√†y l√† 0).

// javascript
// Copy code
// let totalCoin = courses.reduce(function(total, course) {
//   return total + course.coin;
// }, 0);
// H√†m callback c·ªßa reduce: Nh·∫≠n v√†o hai tham s·ªë: total (bi·∫øn t√≠ch tr·ªØ) v√† course (ph·∫ßn t·ª≠ hi·ªán t·∫°i c·ªßa m·∫£ng). Trong h√†m n√†y, gi√° tr·ªã c·ªßa total ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·∫±ng c√°ch c·ªông th√™m gi√° tr·ªã coin (course.coin) c·ªßa t·ª´ng kh√≥a h·ªçc.

// javascript
// Copy code
// function(total, course) {
//   return total + course.coin;
// }
// Gi√° tr·ªã kh·ªüi ƒë·∫ßu cho reduce: L√† 0, l√† gi√° tr·ªã ban ƒë·∫ßu c·ªßa bi·∫øn t√≠ch tr·ªØ (total).

// javascript
// Copy code
// }, 0);
// In ra t·ªïng s·ªë coin: S·ª≠ d·ª•ng console.log ƒë·ªÉ in ra t·ªïng s·ªë coin t√≠nh ƒë∆∞·ª£c t·ª´ ph∆∞∆°ng th·ª©c reduce.

// javascript
// Copy code
// console.log(totalCoin);
// K·∫øt qu·∫£ khi ch·∫°y ƒëo·∫°n m√£ s·∫Ω l√† t·ªïng s·ªë coin c·ªßa t·∫•t c·∫£ c√°c kh√≥a h·ªçc trong m·∫£ng, ƒë∆∞·ª£c in ra trong console.

// let i = 0;
// function coinHandler(accumulator, currentValue, currentIndex, originArray){
//   i++;
//   let total = accumulator + currentValue.coin;
//   console.table({
//     'luot chay:': i,
//     'Bi·∫øn t√≠ch tr·ªØ:': accumulator,
//     'Gi√° tr·ªã khoa hoc:': currentValue.coin,
//     'Tich tru duoc': total,
//   });
//   return total;
// }

// let totalCoins = courses.reduce(coinHandler, 0);

// console.log("T·ªïng s·ªë coin c·ªßa t·∫•t c·∫£ c√°c kh√≥a h·ªçc l√†:", totalCoins);

// let courses = [
//   {
//     id: 1,
//     name: 'Javascript',
//     coin: 250
//   },
//   {
//     id: 2,
//     name: 'HTML CSS',
//     coin: 250
//   },
//   {
//     id: 3,
//     name: 'Ruby',
//     coin: 250
//   },
//   {
//     id: 4,
//     name: 'PHP',
//     coin: 0
//   },
//   {
//     id: 5,
//     name: 'ReactJS',
//     coin: 0
//   }

// ];
// // function courseHandler(course, index){
// //   // console.log(course);
// //   return {
// //     id: course.id,
// //     name: `khoa hoc: ${course.name}`,
// //     coin: course.coin,
// //     coinText: `Gia: ${course.coin}`,
// //     index: index,
// //     originArray: courses,
// //   };
  
 
// // }
// let i = 0;
// function coinHandler(accumulator, currentValue, currentIndex, originArray){
//   i++;
//   // console.table({
//   //   'luot chay:': 1,
//   //   'BIen tich tru:': accumulator,
//   // });
//   return accumulator + currentValue.coin;
// }
// let totalCoin = courses.reduce(coinHandler, 0)
// console.log(totalCoin);
// let i = 0;
// function coinHandler(accumulator, currentValue, currentIndex, originArray){
//   i++;
//   console.table({
//     'luot chay:': 1,
//     'BIen tich tru:': accumulator,
//   });
//   return 100;
// }
// let totalCoin = courses.reduce(coinHandler, 0)
// // bi·∫øn l∆∞u tr·ªØ
// let totalCoin = 0;
// // l·∫∑p qua c√°c ph·∫ßn t·ª≠
// for (let course of courses){
//   // th·ª±c hi·ªán vi·ªác l∆∞u tr·ªØ
//   totalCoin += course.coin;
// }
// console.log(totalCoin);

// courses.forEach(function(course,index){
//   console.log(index,course);
// });
// let isFree = courses.every(function(course,index){
//   console.log(index);
//   return course.coin === 0;
// });
// console.log(isFree);

// let isFree1 = courses.some(function(course,index){
//   console.log(index);
//   return course.coin === 0;
// });
// console.log(isFree1);

// let course = courses.find(function(course,index){
//   console.log(index);
//   return course.coin === 0;
// });
// console.log(course);
// let course = courses.filter(function(course,index){
//   console.log(index);
//   return course.coin === 0;
// });
// console.log(course);

// let topics = [
//   {
//     topic: "Front-end",
//     course: [
//       {
//         id: 1,
//         title:"HTML, CSS"
//       },
//       {
//         id: 2,
//         title: "JS"
//       }
//     ]
//   },
//   {
//     topic: "Back-end",
//     course: [
//       {
//         id: 1,
//         title: "NodeJS"
//       },
//       {
//         id: 2,
//         title: "PHP"
//       }
//     ]
//   }
// ];
// let newCourses = topics.reduce(function(courses, topic){
//   return courses.concat(topic.course)
// },[]);
// console.log(newCourses);
var title = 'responsive web desgin';

console.log(title.includes('responsive'));

let course = ['javascript', 'PHP', 'C++'];
console.log(course.includes('javascript', 0));
// 3 + -1
console.log(course.includes('javascript', -1));
// 3 + -4 < 0 thi mac dinh la 0 ==> true
console.log(course.includes('javascript', -4));
// PI
console.log(Math.PI);
// l√†m tr√≤n s·ªë round
console.log(Math.round(1.3));
console.log(Math.round(1.8));
// gi√° tr·ªã tuy·ªát ƒë·ªëi
console.log(Math.abs(-4));
// l√†m tr√≤n tr√™n Math
console.log(Math.ceil(4.1));
// l√†m tr√≤n d∆∞·ªõi
console.log(Math.floor(4.9999));
// tr·∫£ v·ªÅ s·ªë th·∫≠p ph√¢n nh·ªè h∆°n 1 vi tep rong
console.log(Math.random());
let random = Math.floor(Math.random()*100);
//